Arguments: 
  /home/fengjutian/.nvm/versions/node/v20.17.0/bin/node /home/fengjutian/.nvm/versions/node/v20.17.0/bin/yarn --ignore-engines

PATH: 
  /tmp/yarn--1726924739032-0.7329943660745017:/home/fengjutian/vscode/node_modules/.bin:/usr/local/share/.config/yarn/link/node_modules/.bin:/home/fengjutian/.nvm/versions/node/v20.17.0/libexec/lib/node_modules/npm/bin/node-gyp-bin:/home/fengjutian/.nvm/versions/node/v20.17.0/lib/node_modules/npm/bin/node-gyp-bin:/home/fengjutian/.nvm/versions/node/v20.17.0/bin/node_modules/npm/bin/node-gyp-bin:/home/fengjutian/.nvm/versions/node/v20.17.0/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin

Yarn version: 
  1.22.17

Node version: 
  20.17.0

Platform: 
  linux x64

Trace: 
  AggregateError [ETIMEDOUT]: 
      at internalConnectMultiple (node:net:1118:18)
      at internalConnectMultiple (node:net:1186:5)
      at Timeout.internalConnectMultipleTimeout (node:net:1712:5)
      at listOnTimeout (node:internal/timers:583:11)
      at process.processTimers (node:internal/timers:519:7)

npm manifest: 
  {
    "name": "git",
    "displayName": "%displayName%",
    "description": "%description%",
    "publisher": "vscode",
    "license": "MIT",
    "version": "1.0.0",
    "engines": {
      "vscode": "^1.5.0"
    },
    "aiKey": "0c6ae279ed8443289764825290e4f9e2-1a736e7c-1324-4338-be46-fc2a58ae4d14-7255",
    "enabledApiProposals": [
      "canonicalUriProvider",
      "contribEditSessions",
      "contribEditorContentMenu",
      "contribMergeEditorMenus",
      "contribMultiDiffEditorMenus",
      "contribDiffEditorGutterToolBarMenus",
      "contribSourceControlHistoryItemChangesMenu",
      "contribSourceControlHistoryItemGroupMenu",
      "contribSourceControlHistoryItemMenu",
      "contribSourceControlHistoryTitleMenu",
      "contribSourceControlInputBoxMenu",
      "contribSourceControlTitleMenu",
      "contribViewsWelcome",
      "diffCommand",
      "editSessionIdentityProvider",
      "quickDiffProvider",
      "quickInputButtonLocation",
      "quickPickSortByLabel",
      "scmActionButton",
      "scmHistoryProvider",
      "scmMultiDiffEditor",
      "scmSelectedProvider",
      "scmTextDocument",
      "scmValidation",
      "tabInputMultiDiff",
      "tabInputTextMerge",
      "timeline"
    ],
    "categories": [
      "Other"
    ],
    "activationEvents": [
      "*",
      "onEditSession:file",
      "onFileSystem:git",
      "onFileSystem:git-show"
    ],
    "extensionDependencies": [
      "vscode.git-base"
    ],
    "main": "./out/main",
    "icon": "resources/icons/git.png",
    "scripts": {
      "compile": "gulp compile-extension:git",
      "watch": "gulp watch-extension:git",
      "update-emoji": "node ./build/update-emoji.js",
      "test": "node ../../node_modules/mocha/bin/mocha"
    },
    "capabilities": {
      "virtualWorkspaces": true,
      "untrustedWorkspaces": {
        "supported": false
      }
    },
    "contributes": {
      "commands": [
        {
          "command": "git.continueInLocalClone",
          "title": "%command.continueInLocalClone%",
          "category": "Git",
          "icon": "$(repo-clone)",
          "enablement": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0 && remoteName"
        },
        {
          "command": "git.clone",
          "title": "%command.clone%",
          "category": "Git",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.cloneRecursive",
          "title": "%command.cloneRecursive%",
          "category": "Git",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.init",
          "title": "%command.init%",
          "category": "Git",
          "icon": "$(add)",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.openRepository",
          "title": "%command.openRepository%",
          "category": "Git",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.reopenClosedRepositories",
          "title": "%command.reopenClosedRepositories%",
          "icon": "$(repo)",
          "category": "Git",
          "enablement": "!operationInProgress && git.closedRepositoryCount != 0"
        },
        {
          "command": "git.close",
          "title": "%command.close%",
          "category": "Git",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.closeOtherRepositories",
          "title": "%command.closeOtherRepositories%",
          "category": "Git",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.refresh",
          "title": "%command.refresh%",
          "category": "Git",
          "icon": "$(refresh)",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.openChange",
          "title": "%command.openChange%",
          "category": "Git",
          "icon": "$(compare-changes)"
        },
        {
          "command": "git.openAllChanges",
          "title": "%command.openAllChanges%",
          "category": "Git"
        },
        {
          "command": "git.openFile",
          "title": "%command.openFile%",
          "category": "Git",
          "icon": "$(go-to-file)"
        },
        {
          "command": "git.openFile2",
          "title": "%command.openFile%",
          "category": "Git",
          "icon": "$(go-to-file)"
        },
        {
          "command": "git.openHEADFile",
          "title": "%command.openHEADFile%",
          "category": "Git"
        },
        {
          "command": "git.stage",
          "title": "%command.stage%",
          "category": "Git",
          "icon": "$(add)",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.stageAll",
          "title": "%command.stageAll%",
          "category": "Git",
          "icon": "$(add)",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.stageAllTracked",
          "title": "%command.stageAllTracked%",
          "category": "Git",
          "icon": "$(add)",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.stageAllUntracked",
          "title": "%command.stageAllUntracked%",
          "category": "Git",
          "icon": "$(add)",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.stageAllMerge",
          "title": "%command.stageAllMerge%",
          "category": "Git",
          "icon": "$(add)",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.stageSelectedRanges",
          "title": "%command.stageSelectedRanges%",
          "category": "Git",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.diff.stageHunk",
          "title": "%command.stageBlock%",
          "category": "Git",
          "icon": "$(plus)"
        },
        {
          "command": "git.diff.stageSelection",
          "title": "%command.stageSelection%",
          "category": "Git",
          "icon": "$(plus)"
        },
        {
          "command": "git.revertSelectedRanges",
          "title": "%command.revertSelectedRanges%",
          "category": "Git",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.stageChange",
          "title": "%command.stageChange%",
          "category": "Git",
          "icon": "$(add)",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.stageFile",
          "title": "%command.stage%",
          "category": "Git",
          "icon": "$(add)",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.revertChange",
          "title": "%command.revertChange%",
          "category": "Git",
          "icon": "$(discard)",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.unstage",
          "title": "%command.unstage%",
          "category": "Git",
          "icon": "$(remove)",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.unstageAll",
          "title": "%command.unstageAll%",
          "category": "Git",
          "icon": "$(remove)",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.unstageSelectedRanges",
          "title": "%command.unstageSelectedRanges%",
          "category": "Git",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.unstageFile",
          "title": "%command.unstage%",
          "category": "Git",
          "icon": "$(remove)",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.clean",
          "title": "%command.clean%",
          "category": "Git",
          "icon": "$(discard)",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.cleanAll",
          "title": "%command.cleanAll%",
          "category": "Git",
          "icon": "$(discard)",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.cleanAllTracked",
          "title": "%command.cleanAllTracked%",
          "category": "Git",
          "icon": "$(discard)",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.cleanAllUntracked",
          "title": "%command.cleanAllUntracked%",
          "category": "Git",
          "icon": "$(discard)",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.rename",
          "title": "%command.rename%",
          "category": "Git",
          "icon": "$(discard)",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.commit",
          "title": "%command.commit%",
          "category": "Git",
          "icon": "$(check)",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.commitAmend",
          "title": "%command.commitAmend%",
          "category": "Git",
          "icon": "$(check)",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.commitSigned",
          "title": "%command.commitSigned%",
          "category": "Git",
          "icon": "$(check)",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.commitStaged",
          "title": "%command.commitStaged%",
          "category": "Git",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.commitEmpty",
          "title": "%command.commitEmpty%",
          "category": "Git",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.commitStagedSigned",
          "title": "%command.commitStagedSigned%",
          "category": "Git",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.commitStagedAmend",
          "title": "%command.commitStagedAmend%",
          "category": "Git",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.commitAll",
          "title": "%command.commitAll%",
          "category": "Git",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.commitAllSigned",
          "title": "%command.commitAllSigned%",
          "category": "Git",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.commitAllAmend",
          "title": "%command.commitAllAmend%",
          "category": "Git",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.commitNoVerify",
          "title": "%command.commitNoVerify%",
          "category": "Git",
          "icon": "$(check)",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.commitStagedNoVerify",
          "title": "%command.commitStagedNoVerify%",
          "category": "Git",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.commitEmptyNoVerify",
          "title": "%command.commitEmptyNoVerify%",
          "category": "Git",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.commitStagedSignedNoVerify",
          "title": "%command.commitStagedSignedNoVerify%",
          "category": "Git",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.commitAmendNoVerify",
          "title": "%command.commitAmendNoVerify%",
          "category": "Git",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.commitSignedNoVerify",
          "title": "%command.commitSignedNoVerify%",
          "category": "Git",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.commitStagedAmendNoVerify",
          "title": "%command.commitStagedAmendNoVerify%",
          "category": "Git",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.commitAllNoVerify",
          "title": "%command.commitAllNoVerify%",
          "category": "Git",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.commitAllSignedNoVerify",
          "title": "%command.commitAllSignedNoVerify%",
          "category": "Git",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.commitAllAmendNoVerify",
          "title": "%command.commitAllAmendNoVerify%",
          "category": "Git",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.commitMessageAccept",
          "title": "%command.commitMessageAccept%",
          "icon": "$(check)",
          "category": "Git"
        },
        {
          "command": "git.commitMessageDiscard",
          "title": "%command.commitMessageDiscard%",
          "icon": "$(discard)",
          "category": "Git"
        },
        {
          "command": "git.restoreCommitTemplate",
          "title": "%command.restoreCommitTemplate%",
          "category": "Git",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.undoCommit",
          "title": "%command.undoCommit%",
          "category": "Git",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.checkout",
          "title": "%command.checkout%",
          "category": "Git",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.checkoutDetached",
          "title": "%command.checkoutDetached%",
          "category": "Git",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.branch",
          "title": "%command.branch%",
          "category": "Git",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.branchFrom",
          "title": "%command.branchFrom%",
          "category": "Git",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.deleteBranch",
          "title": "%command.deleteBranch%",
          "category": "Git",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.renameBranch",
          "title": "%command.renameBranch%",
          "category": "Git",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.merge",
          "title": "%command.merge%",
          "category": "Git",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.mergeAbort",
          "title": "%command.mergeAbort%",
          "category": "Git",
          "enablement": "gitMergeInProgress"
        },
        {
          "command": "git.rebase",
          "title": "%command.rebase%",
          "category": "Git",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.createTag",
          "title": "%command.createTag%",
          "category": "Git",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.deleteTag",
          "title": "%command.deleteTag%",
          "category": "Git",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.deleteRemoteTag",
          "title": "%command.deleteRemoteTag%",
          "category": "Git",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.fetch",
          "title": "%command.fetch%",
          "category": "Git",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.fetchPrune",
          "title": "%command.fetchPrune%",
          "category": "Git",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.fetchAll",
          "title": "%command.fetchAll%",
          "category": "Git",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.fetchRef",
          "title": "%command.fetch%",
          "icon": "$(git-fetch)",
          "category": "Git",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.pull",
          "title": "%command.pull%",
          "category": "Git",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.pullRebase",
          "title": "%command.pullRebase%",
          "category": "Git",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.pullFrom",
          "title": "%command.pullFrom%",
          "category": "Git",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.pullRef",
          "title": "%command.pull%",
          "icon": "$(repo-pull)",
          "category": "Git",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.push",
          "title": "%command.push%",
          "category": "Git",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.pushForce",
          "title": "%command.pushForce%",
          "category": "Git",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.pushTo",
          "title": "%command.pushTo%",
          "category": "Git",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.pushToForce",
          "title": "%command.pushToForce%",
          "category": "Git",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.pushTags",
          "title": "%command.pushTags%",
          "category": "Git",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.pushWithTags",
          "title": "%command.pushFollowTags%",
          "category": "Git",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.pushWithTagsForce",
          "title": "%command.pushFollowTagsForce%",
          "category": "Git",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.pushRef",
          "title": "%command.push%",
          "icon": "$(repo-push)",
          "category": "Git",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.cherryPick",
          "title": "%command.cherryPick%",
          "category": "Git",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.addRemote",
          "title": "%command.addRemote%",
          "category": "Git",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.removeRemote",
          "title": "%command.removeRemote%",
          "category": "Git",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.sync",
          "title": "%command.sync%",
          "category": "Git",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.syncRebase",
          "title": "%command.syncRebase%",
          "category": "Git",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.publish",
          "title": "%command.publish%",
          "category": "Git",
          "icon": "$(cloud-upload)",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.showOutput",
          "title": "%command.showOutput%",
          "category": "Git"
        },
        {
          "command": "git.ignore",
          "title": "%command.ignore%",
          "category": "Git",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.revealInExplorer",
          "title": "%command.revealInExplorer%",
          "category": "Git"
        },
        {
          "command": "git.revealFileInOS.linux",
          "title": "%command.revealFileInOS.linux%",
          "category": "Git"
        },
        {
          "command": "git.revealFileInOS.mac",
          "title": "%command.revealFileInOS.mac%",
          "category": "Git"
        },
        {
          "command": "git.revealFileInOS.windows",
          "title": "%command.revealFileInOS.windows%",
          "category": "Git"
        },
        {
          "command": "git.stashIncludeUntracked",
          "title": "%command.stashIncludeUntracked%",
          "category": "Git",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.stash",
          "title": "%command.stash%",
          "category": "Git",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.stashStaged",
          "title": "%command.stashStaged%",
          "category": "Git",
          "enablement": "!operationInProgress && gitVersion2.35"
        },
        {
          "command": "git.stashPop",
          "title": "%command.stashPop%",
          "category": "Git",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.stashPopLatest",
          "title": "%command.stashPopLatest%",
          "category": "Git",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.stashPopEditor",
          "title": "%command.stashPopEditor%",
          "icon": "$(git-stash-pop)",
          "category": "Git",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.stashApply",
          "title": "%command.stashApply%",
          "category": "Git",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.stashApplyLatest",
          "title": "%command.stashApplyLatest%",
          "category": "Git",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.stashApplyEditor",
          "title": "%command.stashApplyEditor%",
          "icon": "$(git-stash-apply)",
          "category": "Git",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.stashDrop",
          "title": "%command.stashDrop%",
          "category": "Git",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.stashDropAll",
          "title": "%command.stashDropAll%",
          "category": "Git",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.stashDropEditor",
          "title": "%command.stashDropEditor%",
          "icon": "$(trash)",
          "category": "Git",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.stashView",
          "title": "%command.stashView%",
          "category": "Git",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.timeline.openDiff",
          "title": "%command.timelineOpenDiff%",
          "icon": "$(compare-changes)",
          "category": "Git"
        },
        {
          "command": "git.timeline.copyCommitId",
          "title": "%command.timelineCopyCommitId%",
          "category": "Git"
        },
        {
          "command": "git.timeline.copyCommitMessage",
          "title": "%command.timelineCopyCommitMessage%",
          "category": "Git"
        },
        {
          "command": "git.timeline.selectForCompare",
          "title": "%command.timelineSelectForCompare%",
          "category": "Git"
        },
        {
          "command": "git.timeline.compareWithSelected",
          "title": "%command.timelineCompareWithSelected%",
          "category": "Git"
        },
        {
          "command": "git.timeline.viewCommit",
          "title": "%command.viewCommit%",
          "icon": "$(diff-multiple)",
          "category": "Git"
        },
        {
          "command": "git.rebaseAbort",
          "title": "%command.rebaseAbort%",
          "category": "Git",
          "enablement": "gitRebaseInProgress"
        },
        {
          "command": "git.closeAllDiffEditors",
          "title": "%command.closeAllDiffEditors%",
          "category": "Git",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.closeAllUnmodifiedEditors",
          "title": "%command.closeAllUnmodifiedEditors%",
          "category": "Git",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.api.getRepositories",
          "title": "%command.api.getRepositories%",
          "category": "Git API"
        },
        {
          "command": "git.api.getRepositoryState",
          "title": "%command.api.getRepositoryState%",
          "category": "Git API"
        },
        {
          "command": "git.api.getRemoteSources",
          "title": "%command.api.getRemoteSources%",
          "category": "Git API"
        },
        {
          "command": "git.acceptMerge",
          "title": "%command.git.acceptMerge%",
          "category": "Git",
          "enablement": "isMergeEditor && mergeEditorResultUri in git.mergeChanges"
        },
        {
          "command": "git.openMergeEditor",
          "title": "%command.git.openMergeEditor%",
          "category": "Git"
        },
        {
          "command": "git.runGitMerge",
          "title": "%command.git.runGitMerge%",
          "category": "Git",
          "enablement": "isMergeEditor"
        },
        {
          "command": "git.runGitMergeDiff3",
          "title": "%command.git.runGitMergeDiff3%",
          "category": "Git",
          "enablement": "isMergeEditor"
        },
        {
          "command": "git.manageUnsafeRepositories",
          "title": "%command.manageUnsafeRepositories%",
          "category": "Git"
        },
        {
          "command": "git.openRepositoriesInParentFolders",
          "title": "%command.openRepositoriesInParentFolders%",
          "category": "Git"
        },
        {
          "command": "git.viewChanges",
          "title": "%command.viewChanges%",
          "icon": "$(diff-multiple)",
          "category": "Git",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.viewStagedChanges",
          "title": "%command.viewStagedChanges%",
          "icon": "$(diff-multiple)",
          "category": "Git",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.viewUntrackedChanges",
          "title": "%command.viewUntrackedChanges%",
          "icon": "$(diff-multiple)",
          "category": "Git",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.viewCommit",
          "title": "%command.viewCommit%",
          "icon": "$(diff-multiple)",
          "category": "Git",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.viewAllChanges",
          "title": "%command.viewAllChanges%",
          "icon": "$(diff-multiple)",
          "category": "Git",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.copyCommitId",
          "title": "%command.timelineCopyCommitId%",
          "category": "Git"
        },
        {
          "command": "git.copyCommitMessage",
          "title": "%command.timelineCopyCommitMessage%",
          "category": "Git"
        }
      ],
      "continueEditSession": [
        {
          "command": "git.continueInLocalClone",
          "qualifiedName": "%command.continueInLocalClone.qualifiedName%",
          "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0 && remoteName",
          "remoteGroup": "remote_42_git_0_local@0"
        }
      ],
      "keybindings": [
        {
          "command": "git.stageSelectedRanges",
          "key": "ctrl+k ctrl+alt+s",
          "mac": "cmd+k cmd+alt+s",
          "when": "isInDiffEditor"
        },
        {
          "command": "git.unstageSelectedRanges",
          "key": "ctrl+k ctrl+n",
          "mac": "cmd+k cmd+n",
          "when": "isInDiffEditor"
        },
        {
          "command": "git.revertSelectedRanges",
          "key": "ctrl+k ctrl+r",
          "mac": "cmd+k cmd+r",
          "when": "isInDiffEditor"
        }
      ],
      "menus": {
        "commandPalette": [
          {
            "command": "git.continueInLocalClone",
            "when": "false"
          },
          {
            "command": "git.clone",
            "when": "config.git.enabled && !git.missing"
          },
          {
            "command": "git.cloneRecursive",
            "when": "config.git.enabled && !git.missing"
          },
          {
            "command": "git.init",
            "when": "config.git.enabled && !git.missing && remoteName != 'codespaces'"
          },
          {
            "command": "git.openRepository",
            "when": "config.git.enabled && !git.missing"
          },
          {
            "command": "git.close",
            "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
          },
          {
            "command": "git.closeOtherRepositories",
            "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount > 1"
          },
          {
            "command": "git.refresh",
            "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
          },
          {
            "command": "git.openFile",
            "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0 && resourceScheme == file && scmActiveResourceHasChanges"
          },
          {
            "command": "git.openHEADFile",
            "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0 && resourceScheme == file && scmActiveResourceHasChanges"
          },
          {
            "command": "git.openChange",
            "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
          },
          {
            "command": "git.stage",
            "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
          },
          {
            "command": "git.stageAll",
            "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
          },
          {
            "command": "git.stageAllTracked",
            "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
          },
          {
            "command": "git.stageAllUntracked",
            "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
          },
          {
            "command": "git.stageAllMerge",
            "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
          },
          {
            "command": "git.stageSelectedRanges",
            "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0 && resourceScheme =~ /^git$|^file$/"
          },
          {
            "command": "git.stageChange",
            "when": "false"
          },
          {
            "command": "git.revertSelectedRanges",
            "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0 && resourceScheme =~ /^git$|^file$/"
          },
          {
            "command": "git.revertChange",
            "when": "false"
          },
          {
            "command": "git.openFile2",
            "when": "false"
          },
          {
            "command": "git.unstage",
            "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
          },
          {
            "command": "git.unstageAll",
            "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
          },
          {
            "command": "git.unstageSelectedRanges",
            "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0 && isInDiffEditor && resourceScheme =~ /^git$|^file$/"
          },
          {
            "command": "git.clean",
            "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
          },
          {
            "command": "git.cleanAll",
            "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
          },
          {
            "command": "git.cleanAllTracked",
            "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
          },
          {
            "command": "git.cleanAllUntracked",
            "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
          },
          {
            "command": "git.rename",
            "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0 && resourceScheme == file && scmActiveResourceRepository"
          },
          {
            "command": "git.commit",
            "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
          },
          {
            "command": "git.commitAmend",
            "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
          },
          {
            "command": "git.commitSigned",
            "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
          },
          {
            "command": "git.commitStaged",
            "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
          },
          {
            "command": "git.commitEmpty",
            "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
          },
          {
            "command": "git.commitStagedSigned",
            "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
          },
          {
            "command": "git.commitStagedAmend",
            "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
          },
          {
            "command": "git.commitAll",
            "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
          },
          {
            "command": "git.commitAllSigned",
            "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
          },
          {
            "command": "git.commitAllAmend",
            "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
          },
          {
            "command": "git.rebaseAbort",
            "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0 && gitRebaseInProgress"
          },
          {
            "command": "git.commitNoVerify",
            "when": "config.git.enabled && !git.missing && config.git.allowNoVerifyCommit && gitOpenRepositoryCount != 0"
          },
          {
            "command": "git.commitStagedNoVerify",
            "when": "config.git.enabled && !git.missing && config.git.allowNoVerifyCommit && gitOpenRepositoryCount != 0"
          },
          {
            "command": "git.commitEmptyNoVerify",
            "when": "config.git.enabled && !git.missing && config.git.allowNoVerifyCommit && gitOpenRepositoryCount != 0"
          },
          {
            "command": "git.commitStagedSignedNoVerify",
            "when": "config.git.enabled && !git.missing && config.git.allowNoVerifyCommit && gitOpenRepositoryCount != 0"
          },
          {
            "command": "git.commitAmendNoVerify",
            "when": "config.git.enabled && !git.missing && config.git.allowNoVerifyCommit && gitOpenRepositoryCount != 0"
          },
          {
            "command": "git.commitSignedNoVerify",
            "when": "config.git.enabled && !git.missing && config.git.allowNoVerifyCommit && gitOpenRepositoryCount != 0"
          },
          {
            "command": "git.commitStagedAmendNoVerify",
            "when": "config.git.enabled && !git.missing && config.git.allowNoVerifyCommit && gitOpenRepositoryCount != 0"
          },
          {
            "command": "git.commitAllNoVerify",
            "when": "config.git.enabled && !git.missing && config.git.allowNoVerifyCommit && gitOpenRepositoryCount != 0"
          },
          {
            "command": "git.commitAllSignedNoVerify",
            "when": "config.git.enabled && !git.missing && config.git.allowNoVerifyCommit && gitOpenRepositoryCount != 0"
          },
          {
            "command": "git.commitAllAmendNoVerify",
            "when": "config.git.enabled && !git.missing && config.git.allowNoVerifyCommit && gitOpenRepositoryCount != 0"
          },
          {
            "command": "git.restoreCommitTemplate",
            "when": "false"
          },
          {
            "command": "git.commitMessageAccept",
            "when": "false"
          },
          {
            "command": "git.commitMessageDiscard",
            "when": "false"
          },
          {
            "command": "git.revealInExplorer",
            "when": "false"
          },
          {
            "command": "git.revealFileInOS.linux",
            "when": "false"
          },
          {
            "command": "git.revealFileInOS.mac",
            "when": "false"
          },
          {
            "command": "git.revealFileInOS.windows",
            "when": "false"
          },
          {
            "command": "git.undoCommit",
            "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
          },
          {
            "command": "git.checkout",
            "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
          },
          {
            "command": "git.branch",
            "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
          },
          {
            "command": "git.branchFrom",
            "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
          },
          {
            "command": "git.deleteBranch",
            "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
          },
          {
            "command": "git.renameBranch",
            "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
          },
          {
            "command": "git.cherryPick",
            "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
          },
          {
            "command": "git.pull",
            "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
          },
          {
            "command": "git.pullFrom",
            "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
          },
          {
            "command": "git.pullRebase",
            "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
          },
          {
            "command": "git.merge",
            "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
          },
          {
            "command": "git.mergeAbort",
            "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0 && gitMergeInProgress"
          },
          {
            "command": "git.rebase",
            "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
          },
          {
            "command": "git.createTag",
            "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
          },
          {
            "command": "git.deleteTag",
            "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
          },
          {
            "command": "git.deleteRemoteTag",
            "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
          },
          {
            "command": "git.fetch",
            "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
          },
          {
            "command": "git.fetchPrune",
            "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
          },
          {
            "command": "git.fetchAll",
            "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
          },
          {
            "command": "git.push",
            "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
          },
          {
            "command": "git.pushForce",
            "when": "config.git.enabled && !git.missing && config.git.allowForcePush && gitOpenRepositoryCount != 0"
          },
          {
            "command": "git.pushTo",
            "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
          },
          {
            "command": "git.pushToForce",
            "when": "config.git.enabled && !git.missing && config.git.allowForcePush && gitOpenRepositoryCount != 0"
          },
          {
            "command": "git.pushWithTags",
            "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
          },
          {
            "command": "git.pushWithTagsForce",
            "when": "config.git.enabled && !git.missing && config.git.allowForcePush && gitOpenRepositoryCount != 0"
          },
          {
            "command": "git.pushTags",
            "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
          },
          {
            "command": "git.addRemote",
            "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
          },
          {
            "command": "git.removeRemote",
            "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
          },
          {
            "command": "git.sync",
            "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
          },
          {
            "command": "git.syncRebase",
            "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
          },
          {
            "command": "git.publish",
            "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
          },
          {
            "command": "git.showOutput",
            "when": "config.git.enabled"
          },
          {
            "command": "git.ignore",
            "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0 && resourceScheme == file && scmActiveResourceRepository"
          },
          {
            "command": "git.stashIncludeUntracked",
            "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
          },
          {
            "command": "git.stash",
            "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
          },
          {
            "command": "git.stashStaged",
            "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0 && gitVersion2.35"
          },
          {
            "command": "git.stashPop",
            "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
          },
          {
            "command": "git.stashPopLatest",
            "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
          },
          {
            "command": "git.stashPopEditor",
            "when": "false"
          },
          {
            "command": "git.stashApply",
            "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
          },
          {
            "command": "git.stashApplyLatest",
            "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
          },
          {
            "command": "git.stashApplyEditor",
            "when": "false"
          },
          {
            "command": "git.stashDrop",
            "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
          },
          {
            "command": "git.stashDropAll",
            "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
          },
          {
            "command": "git.stashDropEditor",
            "when": "false"
          },
          {
            "command": "git.timeline.openDiff",
            "when": "false"
          },
          {
            "command": "git.timeline.copyCommitId",
            "when": "false"
          },
          {
            "command": "git.timeline.copyCommitMessage",
            "when": "false"
          },
          {
            "command": "git.timeline.selectForCompare",
            "when": "false"
          },
          {
            "command": "git.timeline.compareWithSelected",
            "when": "false"
          },
          {
            "command": "git.timeline.viewCommit",
            "when": "false"
          },
          {
            "command": "git.closeAllDiffEditors",
            "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
          },
          {
            "command": "git.api.getRepositories",
            "when": "false"
          },
          {
            "command": "git.api.getRepositoryState",
            "when": "false"
          },
          {
            "command": "git.api.getRemoteSources",
            "when": "false"
          },
          {
            "command": "git.openMergeEditor",
            "when": "false"
          },
          {
            "command": "git.manageUnsafeRepositories",
            "when": "config.git.enabled && !git.missing && git.unsafeRepositoryCount != 0"
          },
          {
            "command": "git.openRepositoriesInParentFolders",
            "when": "config.git.enabled && !git.missing && git.parentRepositoryCount != 0"
          },
          {
            "command": "git.stashView",
            "when": "config.git.enabled && !git.missing && config.multiDiffEditor.experimental.enabled"
          },
          {
            "command": "git.viewChanges",
            "when": "config.git.enabled && !git.missing && config.multiDiffEditor.experimental.enabled"
          },
          {
            "command": "git.viewStagedChanges",
            "when": "config.git.enabled && !git.missing && config.multiDiffEditor.experimental.enabled"
          },
          {
            "command": "git.viewUntrackedChanges",
            "when": "config.git.enabled && !git.missing && config.multiDiffEditor.experimental.enabled && config.git.untrackedChanges == separate"
          },
          {
            "command": "git.viewCommit",
            "when": "false"
          },
          {
            "command": "git.viewAllChanges",
            "when": "false"
          },
          {
            "command": "git.stageFile",
            "when": "false"
          },
          {
            "command": "git.unstageFile",
            "when": "false"
          },
          {
            "command": "git.fetchRef",
            "when": "false"
          },
          {
            "command": "git.pullRef",
            "when": "false"
          },
          {
            "command": "git.pushRef",
            "when": "false"
          },
          {
            "command": "git.copyCommitId",
            "when": "false"
          },
          {
            "command": "git.copyCommitMessage",
            "when": "false"
          }
        ],
        "scm/title": [
          {
            "command": "git.commit",
            "group": "navigation",
            "when": "scmProvider == git"
          },
          {
            "command": "git.refresh",
            "group": "navigation",
            "when": "scmProvider == git"
          },
          {
            "command": "git.pull",
            "group": "1_header@1",
            "when": "scmProvider == git"
          },
          {
            "command": "git.push",
            "group": "1_header@2",
            "when": "scmProvider == git"
          },
          {
            "command": "git.clone",
            "group": "1_header@3",
            "when": "scmProvider == git"
          },
          {
            "command": "git.checkout",
            "group": "1_header@4",
            "when": "scmProvider == git"
          },
          {
            "command": "git.fetch",
            "group": "1_header@5",
            "when": "scmProvider == git"
          },
          {
            "submenu": "git.commit",
            "group": "2_main@1",
            "when": "scmProvider == git"
          },
          {
            "submenu": "git.changes",
            "group": "2_main@2",
            "when": "scmProvider == git"
          },
          {
            "submenu": "git.pullpush",
            "group": "2_main@3",
            "when": "scmProvider == git"
          },
          {
            "submenu": "git.branch",
            "group": "2_main@4",
            "when": "scmProvider == git"
          },
          {
            "submenu": "git.remotes",
            "group": "2_main@5",
            "when": "scmProvider == git"
          },
          {
            "submenu": "git.stash",
            "group": "2_main@6",
            "when": "scmProvider == git"
          },
          {
            "submenu": "git.tags",
            "group": "2_main@7",
            "when": "scmProvider == git"
          },
          {
            "command": "git.showOutput",
            "group": "3_footer",
            "when": "scmProvider == git"
          }
        ],
        "scm/sourceControl/title": [
          {
            "command": "git.reopenClosedRepositories",
            "group": "navigation@1",
            "when": "git.closedRepositoryCount > 0"
          }
        ],
        "scm/sourceControl": [
          {
            "command": "git.close",
            "group": "navigation@1",
            "when": "scmProvider == git"
          },
          {
            "command": "git.closeOtherRepositories",
            "group": "navigation@2",
            "when": "scmProvider == git && gitOpenRepositoryCount > 1"
          }
        ],
        "scm/resourceGroup/context": [
          {
            "command": "git.stageAllMerge",
            "when": "scmProvider == git && scmResourceGroup == merge",
            "group": "1_modification"
          },
          {
            "command": "git.stageAllMerge",
            "when": "scmProvider == git && scmResourceGroup == merge",
            "group": "inline@2"
          },
          {
            "command": "git.unstageAll",
            "when": "scmProvider == git && scmResourceGroup == index",
            "group": "1_modification"
          },
          {
            "command": "git.unstageAll",
            "when": "scmProvider == git && scmResourceGroup == index",
            "group": "inline@2"
          },
          {
            "command": "git.viewStagedChanges",
            "when": "scmProvider == git && scmResourceGroup == index && config.multiDiffEditor.experimental.enabled",
            "group": "inline@1"
          },
          {
            "command": "git.viewChanges",
            "when": "scmProvider == git && scmResourceGroup == workingTree && config.multiDiffEditor.experimental.enabled",
            "group": "inline@1"
          },
          {
            "command": "git.cleanAll",
            "when": "scmProvider == git && scmResourceGroup == workingTree && config.git.untrackedChanges == mixed",
            "group": "1_modification"
          },
          {
            "command": "git.stageAll",
            "when": "scmProvider == git && scmResourceGroup == workingTree && config.git.untrackedChanges == mixed",
            "group": "1_modification"
          },
          {
            "command": "git.cleanAll",
            "when": "scmProvider == git && scmResourceGroup == workingTree && config.git.untrackedChanges == mixed",
            "group": "inline@2"
          },
          {
            "command": "git.stageAll",
            "when": "scmProvider == git && scmResourceGroup == workingTree && config.git.untrackedChanges == mixed",
            "group": "inline@2"
          },
          {
            "command": "git.cleanAllTracked",
            "when": "scmProvider == git && scmResourceGroup == workingTree && config.git.untrackedChanges != mixed",
            "group": "1_modification"
          },
          {
            "command": "git.stageAllTracked",
            "when": "scmProvider == git && scmResourceGroup == workingTree && config.git.untrackedChanges != mixed",
            "group": "1_modification"
          },
          {
            "command": "git.cleanAllTracked",
            "when": "scmProvider == git && scmResourceGroup == workingTree && config.git.untrackedChanges != mixed",
            "group": "inline@2"
          },
          {
            "command": "git.stageAllTracked",
            "when": "scmProvider == git && scmResourceGroup == workingTree && config.git.untrackedChanges != mixed",
            "group": "inline@2"
          },
          {
            "command": "git.cleanAllUntracked",
            "when": "scmProvider == git && scmResourceGroup == untracked",
            "group": "1_modification"
          },
          {
            "command": "git.stageAllUntracked",
            "when": "scmProvider == git && scmResourceGroup == untracked",
            "group": "1_modification"
          },
          {
            "command": "git.viewUntrackedChanges",
            "when": "scmProvider == git && scmResourceGroup == untracked && config.multiDiffEditor.experimental.enabled",
            "group": "inline@1"
          },
          {
            "command": "git.cleanAllUntracked",
            "when": "scmProvider == git && scmResourceGroup == untracked",
            "group": "inline@2"
          },
          {
            "command": "git.stageAllUntracked",
            "when": "scmProvider == git && scmResourceGroup == untracked",
            "group": "inline@2"
          }
        ],
        "scm/resourceFolder/context": [
          {
            "command": "git.stage",
            "when": "scmProvider == git && scmResourceGroup == merge",
            "group": "1_modification"
          },
          {
            "command": "git.stage",
            "when": "scmProvider == git && scmResourceGroup == merge",
            "group": "inline@2"
          },
          {
            "command": "git.unstage",
            "when": "scmProvider == git && scmResourceGroup == index",
            "group": "1_modification"
          },
          {
            "command": "git.unstage",
            "when": "scmProvider == git && scmResourceGroup == index",
            "group": "inline@2"
          },
          {
            "command": "git.stage",
            "when": "scmProvider == git && scmResourceGroup == workingTree",
            "group": "1_modification"
          },
          {
            "command": "git.clean",
            "when": "scmProvider == git && scmResourceGroup == workingTree",
            "group": "1_modification"
          },
          {
            "command": "git.clean",
            "when": "scmProvider == git && scmResourceGroup == workingTree",
            "group": "inline@2"
          },
          {
            "command": "git.stage",
            "when": "scmProvider == git && scmResourceGroup == workingTree",
            "group": "inline@2"
          },
          {
            "command": "git.ignore",
            "when": "scmProvider == git && scmResourceGroup == workingTree",
            "group": "1_modification@3"
          },
          {
            "command": "git.stage",
            "when": "scmProvider == git && scmResourceGroup == untracked",
            "group": "1_modification"
          },
          {
            "command": "git.stage",
            "when": "scmProvider == git && scmResourceGroup == untracked",
            "group": "inline@2"
          },
          {
            "command": "git.clean",
            "when": "scmProvider == git && scmResourceGroup == untracked",
            "group": "1_modification"
          },
          {
            "command": "git.clean",
            "when": "scmProvider == git && scmResourceGroup == untracked",
            "group": "inline@2"
          },
          {
            "command": "git.ignore",
            "when": "scmProvider == git && scmResourceGroup == untracked",
            "group": "1_modification@3"
          }
        ],
        "scm/resourceState/context": [
          {
            "command": "git.stage",
            "when": "scmProvider == git && scmResourceGroup == merge",
            "group": "1_modification"
          },
          {
            "command": "git.openFile",
            "when": "scmProvider == git && scmResourceGroup == merge",
            "group": "navigation"
          },
          {
            "command": "git.stage",
            "when": "scmProvider == git && scmResourceGroup == merge",
            "group": "inline@2"
          },
          {
            "command": "git.revealFileInOS.linux",
            "when": "scmProvider == git && scmResourceGroup == merge && remoteName == '' && isLinux",
            "group": "2_view@1"
          },
          {
            "command": "git.revealFileInOS.mac",
            "when": "scmProvider == git && scmResourceGroup == merge && remoteName == '' && isMac",
            "group": "2_view@1"
          },
          {
            "command": "git.revealFileInOS.windows",
            "when": "scmProvider == git && scmResourceGroup == merge && remoteName == '' && isWindows",
            "group": "2_view@1"
          },
          {
            "command": "git.revealInExplorer",
            "when": "scmProvider == git && scmResourceGroup == merge",
            "group": "2_view@2"
          },
          {
            "command": "git.openFile2",
            "when": "scmProvider == git && scmResourceGroup == merge && config.git.showInlineOpenFileAction && config.git.openDiffOnClick",
            "group": "inline@1"
          },
          {
            "command": "git.openChange",
            "when": "scmProvider == git && scmResourceGroup == merge && config.git.showInlineOpenFileAction && !config.git.openDiffOnClick",
            "group": "inline@1"
          },
          {
            "command": "git.openChange",
            "when": "scmProvider == git && scmResourceGroup == index",
            "group": "navigation"
          },
          {
            "command": "git.openFile",
            "when": "scmProvider == git && scmResourceGroup == index",
            "group": "navigation"
          },
          {
            "command": "git.openHEADFile",
            "when": "scmProvider == git && scmResourceGroup == index",
            "group": "navigation"
          },
          {
            "command": "git.unstage",
            "when": "scmProvider == git && scmResourceGroup == index",
            "group": "1_modification"
          },
          {
            "command": "git.unstage",
            "when": "scmProvider == git && scmResourceGroup == index",
            "group": "inline@2"
          },
          {
            "command": "git.revealFileInOS.linux",
            "when": "scmProvider == git && scmResourceGroup == index && remoteName == '' && isLinux",
            "group": "2_view@1"
          },
          {
            "command": "git.revealFileInOS.mac",
            "when": "scmProvider == git && scmResourceGroup == index && remoteName == '' && isMac",
            "group": "2_view@1"
          },
          {
            "command": "git.revealFileInOS.windows",
            "when": "scmProvider == git && scmResourceGroup == index && remoteName == '' && isWindows",
            "group": "2_view@1"
          },
          {
            "command": "git.revealInExplorer",
            "when": "scmProvider == git && scmResourceGroup == index",
            "group": "2_view@2"
          },
          {
            "command": "git.openFile2",
            "when": "scmProvider == git && scmResourceGroup == index && config.git.showInlineOpenFileAction && config.git.openDiffOnClick",
            "group": "inline@1"
          },
          {
            "command": "git.openChange",
            "when": "scmProvider == git && scmResourceGroup == index && config.git.showInlineOpenFileAction && !config.git.openDiffOnClick",
            "group": "inline@1"
          },
          {
            "command": "git.openChange",
            "when": "scmProvider == git && scmResourceGroup == workingTree",
            "group": "navigation"
          },
          {
            "command": "git.openHEADFile",
            "when": "scmProvider == git && scmResourceGroup == workingTree",
            "group": "navigation"
          },
          {
            "command": "git.openFile",
            "when": "scmProvider == git && scmResourceGroup == workingTree",
            "group": "navigation"
          },
          {
            "command": "git.stage",
            "when": "scmProvider == git && scmResourceGroup == workingTree",
            "group": "1_modification"
          },
          {
            "command": "git.clean",
            "when": "scmProvider == git && scmResourceGroup == workingTree",
            "group": "1_modification"
          },
          {
            "command": "git.clean",
            "when": "scmProvider == git && scmResourceGroup == workingTree",
            "group": "inline@2"
          },
          {
            "command": "git.stage",
            "when": "scmProvider == git && scmResourceGroup == workingTree",
            "group": "inline@2"
          },
          {
            "command": "git.openFile2",
            "when": "scmProvider == git && scmResourceGroup == workingTree && config.git.showInlineOpenFileAction && config.git.openDiffOnClick",
            "group": "inline@1"
          },
          {
            "command": "git.openChange",
            "when": "scmProvider == git && scmResourceGroup == workingTree && config.git.showInlineOpenFileAction && !config.git.openDiffOnClick",
            "group": "inline@1"
          },
          {
            "command": "git.ignore",
            "when": "scmProvider == git && scmResourceGroup == workingTree",
            "group": "1_modification@3"
          },
          {
            "command": "git.revealFileInOS.linux",
            "when": "scmProvider == git && scmResourceGroup == workingTree && remoteName == '' && isLinux",
            "group": "2_view@1"
          },
          {
            "command": "git.revealFileInOS.mac",
            "when": "scmProvider == git && scmResourceGroup == workingTree && remoteName == '' && isMac",
            "group": "2_view@1"
          },
          {
            "command": "git.revealFileInOS.windows",
            "when": "scmProvider == git && scmResourceGroup == workingTree && remoteName == '' && isWindows",
            "group": "2_view@1"
          },
          {
            "command": "git.revealInExplorer",
            "when": "scmProvider == git && scmResourceGroup == workingTree",
            "group": "2_view@2"
          },
          {
            "command": "git.openChange",
            "when": "scmProvider == git && scmResourceGroup == untracked",
            "group": "navigation"
          },
          {
            "command": "git.openHEADFile",
            "when": "scmProvider == git && scmResourceGroup == untracked",
            "group": "navigation"
          },
          {
            "command": "git.openFile",
            "when": "scmProvider == git && scmResourceGroup == untracked",
            "group": "navigation"
          },
          {
            "command": "git.stage",
            "when": "scmProvider == git && scmResourceGroup == untracked",
            "group": "1_modification"
          },
          {
            "command": "git.clean",
            "when": "scmProvider == git && scmResourceGroup == untracked && !gitFreshRepository",
            "group": "1_modification"
          },
          {
            "command": "git.clean",
            "when": "scmProvider == git && scmResourceGroup == untracked && !gitFreshRepository",
            "group": "inline@2"
          },
          {
            "command": "git.stage",
            "when": "scmProvider == git && scmResourceGroup == untracked",
            "group": "inline@2"
          },
          {
            "command": "git.openFile2",
            "when": "scmProvider == git && scmResourceGroup == untracked && config.git.showInlineOpenFileAction && config.git.openDiffOnClick",
            "group": "inline@1"
          },
          {
            "command": "git.openChange",
            "when": "scmProvider == git && scmResourceGroup == untracked && config.git.showInlineOpenFileAction && !config.git.openDiffOnClick",
            "group": "inline@1"
          },
          {
            "command": "git.ignore",
            "when": "scmProvider == git && scmResourceGroup == untracked",
            "group": "1_modification@3"
          }
        ],
        "scm/history/title": [
          {
            "command": "git.fetchRef",
            "group": "navigation@1",
            "when": "scmProvider == git && scmHistoryItemGroupHasRemote"
          },
          {
            "command": "git.pullRef",
            "group": "navigation@2",
            "when": "scmProvider == git && scmHistoryItemGroupHasRemote"
          },
          {
            "command": "git.pushRef",
            "when": "scmProvider == git && scmHistoryItemGroupHasRemote",
            "group": "navigation@3"
          },
          {
            "command": "git.publish",
            "when": "scmProvider == git && !scmHistoryItemGroupHasRemote",
            "group": "navigation@3"
          }
        ],
        "scm/historyItemChanges/title": [
          {
            "command": "git.fetchRef",
            "group": "navigation@1",
            "when": "scmProvider == git && scmHistoryItemGroupHasRemote"
          },
          {
            "command": "git.pullRef",
            "group": "navigation@2",
            "when": "scmProvider == git && scmHistoryItemGroupHasRemote"
          },
          {
            "command": "git.pushRef",
            "when": "scmProvider == git && scmHistoryItemGroupHasRemote",
            "group": "navigation@3"
          },
          {
            "command": "git.publish",
            "when": "scmProvider == git && !scmHistoryItemGroupHasRemote",
            "group": "navigation@3"
          }
        ],
        "scm/historyItem/context": [
          {
            "command": "git.copyCommitId",
            "when": "scmProvider == git && !listMultiSelection",
            "group": "1_copy@1"
          },
          {
            "command": "git.copyCommitMessage",
            "when": "scmProvider == git && !listMultiSelection",
            "group": "1_copy@2"
          }
        ],
        "scm/incomingChanges": [
          {
            "command": "git.fetchRef",
            "group": "navigation",
            "when": "scmProvider == git"
          },
          {
            "command": "git.pullRef",
            "group": "navigation",
            "when": "scmProvider == git"
          }
        ],
        "scm/incomingChanges/context": [
          {
            "command": "git.fetchRef",
            "group": "1_modification@1",
            "when": "scmProvider == git"
          },
          {
            "command": "git.pullRef",
            "group": "1_modification@2",
            "when": "scmProvider == git"
          }
        ],
        "scm/incomingChanges/allChanges/context": [
          {
            "command": "git.viewAllChanges",
            "when": "scmProvider == git && scmHistoryItemFileCount != 0 && config.multiDiffEditor.experimental.enabled",
            "group": "inline@1"
          },
          {
            "command": "git.viewAllChanges",
            "when": "scmProvider == git && scmHistoryItemFileCount != 0 && config.multiDiffEditor.experimental.enabled",
            "group": "1_view@1"
          }
        ],
        "scm/incomingChanges/historyItem/context": [
          {
            "command": "git.viewCommit",
            "when": "scmProvider == git && scmHistoryItemFileCount != 0 && config.multiDiffEditor.experimental.enabled",
            "group": "inline@1"
          },
          {
            "command": "git.viewCommit",
            "when": "scmProvider == git && scmHistoryItemFileCount != 0 && config.multiDiffEditor.experimental.enabled",
            "group": "1_view@1"
          }
        ],
        "scm/outgoingChanges": [
          {
            "command": "git.pushRef",
            "group": "navigation",
            "when": "scmProvider == git && scmHistoryItemGroupHasRemote"
          },
          {
            "command": "git.publish",
            "group": "navigation",
            "when": "scmProvider == git && !scmHistoryItemGroupHasRemote"
          }
        ],
        "scm/outgoingChanges/context": [
          {
            "command": "git.pushRef",
            "when": "scmProvider == git && scmHistoryItemGroupHasRemote",
            "group": "1_modification@1"
          },
          {
            "command": "git.publish",
            "when": "scmProvider == git && !scmHistoryItemGroupHasRemote",
            "group": "1_modification@1"
          }
        ],
        "scm/outgoingChanges/allChanges/context": [
          {
            "command": "git.viewAllChanges",
            "when": "scmProvider == git && scmHistoryItemFileCount != 0 && config.multiDiffEditor.experimental.enabled",
            "group": "inline@1"
          },
          {
            "command": "git.viewAllChanges",
            "when": "scmProvider == git && scmHistoryItemFileCount != 0 && config.multiDiffEditor.experimental.enabled",
            "group": "1_view@1"
          }
        ],
        "scm/outgoingChanges/historyItem/context": [
          {
            "command": "git.viewCommit",
            "when": "scmProvider == git && scmHistoryItemFileCount != 0 && config.multiDiffEditor.experimental.enabled",
            "group": "inline@1"
          },
          {
            "command": "git.viewCommit",
            "when": "scmProvider == git && scmHistoryItemFileCount != 0 && config.multiDiffEditor.experimental.enabled",
            "group": "1_view@1"
          }
        ],
        "editor/title": [
          {
            "command": "git.openFile",
            "group": "navigation",
            "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0 && isInDiffEditor && resourceScheme =~ /^git$|^file$/"
          },
          {
            "command": "git.openFile",
            "group": "navigation",
            "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0 && isInNotebookTextDiffEditor && resourceScheme =~ /^git$|^file$/"
          },
          {
            "command": "git.openChange",
            "group": "navigation",
            "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0 && !isInDiffEditor && !isMergeEditor && resourceScheme == file && scmActiveResourceHasChanges"
          },
          {
            "command": "git.commitMessageAccept",
            "group": "navigation",
            "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0 && editorLangId == git-commit"
          },
          {
            "command": "git.commitMessageDiscard",
            "group": "navigation",
            "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0 && editorLangId == git-commit"
          },
          {
            "command": "git.stageSelectedRanges",
            "group": "2_git@1",
            "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0 && isInDiffEditor && resourceScheme =~ /^git$|^file$/"
          },
          {
            "command": "git.unstageSelectedRanges",
            "group": "2_git@2",
            "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0 && isInDiffEditor && resourceScheme =~ /^git$|^file$/"
          },
          {
            "command": "git.revertSelectedRanges",
            "group": "2_git@3",
            "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0 && isInDiffEditor && resourceScheme =~ /^git$|^file$/"
          },
          {
            "command": "git.stashApplyEditor",
            "alt": "git.stashPopEditor",
            "group": "navigation@1",
            "when": "config.git.enabled && !git.missing && resourceScheme == git-stash"
          },
          {
            "command": "git.stashDropEditor",
            "group": "navigation@2",
            "when": "config.git.enabled && !git.missing && resourceScheme == git-stash"
          }
        ],
        "editor/context": [
          {
            "command": "git.stageSelectedRanges",
            "group": "2_git@1",
            "when": "isInDiffRightEditor && !isEmbeddedDiffEditor && config.git.enabled && !git.missing && gitOpenRepositoryCount != 0 && isInDiffEditor && resourceScheme =~ /^git$|^file$/"
          },
          {
            "command": "git.unstageSelectedRanges",
            "group": "2_git@2",
            "when": "isInDiffRightEditor && !isEmbeddedDiffEditor && config.git.enabled && !git.missing && gitOpenRepositoryCount != 0 && isInDiffEditor && resourceScheme =~ /^git$|^file$/"
          },
          {
            "command": "git.revertSelectedRanges",
            "group": "2_git@3",
            "when": "isInDiffRightEditor && !isEmbeddedDiffEditor && config.git.enabled && !git.missing && gitOpenRepositoryCount != 0 && isInDiffEditor && resourceScheme =~ /^git$|^file$/"
          }
        ],
        "editor/content": [
          {
            "command": "git.acceptMerge",
            "when": "isMergeResultEditor && mergeEditorBaseUri =~ /^(git|file):/ && mergeEditorResultUri in git.mergeChanges"
          },
          {
            "command": "git.openMergeEditor",
            "group": "navigation@-10",
            "when": "config.git.enabled && !git.missing && !isInDiffEditor && !isMergeEditor && resource in git.mergeChanges"
          }
        ],
        "multiDiffEditor/resource/title": [
          {
            "command": "git.stageFile",
            "group": "navigation",
            "when": "scmProvider == git && scmResourceGroup == workingTree"
          },
          {
            "command": "git.stageFile",
            "group": "navigation",
            "when": "scmProvider == git && scmResourceGroup == untracked"
          },
          {
            "command": "git.unstageFile",
            "group": "navigation",
            "when": "scmProvider == git && scmResourceGroup == index"
          }
        ],
        "diffEditor/gutter/hunk": [
          {
            "command": "git.diff.stageHunk",
            "group": "primary@10",
            "when": "diffEditorOriginalUri =~ /^git\\:.*%22ref%22%3A%22~%22%7D$/"
          }
        ],
        "diffEditor/gutter/selection": [
          {
            "command": "git.diff.stageSelection",
            "group": "primary@10",
            "when": "diffEditorOriginalUri =~ /^git\\:.*%22ref%22%3A%22~%22%7D$/"
          }
        ],
        "scm/change/title": [
          {
            "command": "git.stageChange",
            "when": "config.git.enabled && !git.missing && originalResourceScheme == git"
          },
          {
            "command": "git.revertChange",
            "when": "config.git.enabled && !git.missing && originalResourceScheme == git"
          }
        ],
        "timeline/item/context": [
          {
            "command": "git.timeline.viewCommit",
            "group": "inline",
            "when": "config.git.enabled && !git.missing && timelineItem =~ /git:file:commit\\b/ && !listMultiSelection && config.multiDiffEditor.experimental.enabled"
          },
          {
            "command": "git.timeline.openDiff",
            "group": "1_actions@1",
            "when": "config.git.enabled && !git.missing && timelineItem =~ /git:file\\b/ && !listMultiSelection"
          },
          {
            "command": "git.timeline.viewCommit",
            "group": "1_actions@2",
            "when": "config.git.enabled && !git.missing && timelineItem =~ /git:file:commit\\b/ && !listMultiSelection && config.multiDiffEditor.experimental.enabled"
          },
          {
            "command": "git.timeline.compareWithSelected",
            "group": "3_compare@1",
            "when": "config.git.enabled && !git.missing && git.timeline.selectedForCompare && timelineItem =~ /git:file\\b/ && !listMultiSelection"
          },
          {
            "command": "git.timeline.selectForCompare",
            "group": "3_compare@2",
            "when": "config.git.enabled && !git.missing && timelineItem =~ /git:file\\b/ && !listMultiSelection"
          },
          {
            "command": "git.timeline.copyCommitId",
            "group": "5_copy@1",
            "when": "config.git.enabled && !git.missing && timelineItem =~ /git:file:commit\\b/ && !listMultiSelection"
          },
          {
            "command": "git.timeline.copyCommitMessage",
            "group": "5_copy@2",
            "when": "config.git.enabled && !git.missing && timelineItem =~ /git:file:commit\\b/ && !listMultiSelection"
          }
        ],
        "git.commit": [
          {
            "command": "git.commit",
            "group": "1_commit@1"
          },
          {
            "command": "git.commitStaged",
            "group": "1_commit@2"
          },
          {
            "command": "git.commitAll",
            "group": "1_commit@3"
          },
          {
            "command": "git.undoCommit",
            "group": "1_commit@4"
          },
          {
            "command": "git.rebaseAbort",
            "group": "1_commit@5"
          },
          {
            "command": "git.commitNoVerify",
            "group": "2_commit_noverify@1",
            "when": "config.git.allowNoVerifyCommit"
          },
          {
            "command": "git.commitStagedNoVerify",
            "group": "2_commit_noverify@2",
            "when": "config.git.allowNoVerifyCommit"
          },
          {
            "command": "git.commitAllNoVerify",
            "group": "2_commit_noverify@3",
            "when": "config.git.allowNoVerifyCommit"
          },
          {
            "command": "git.commitAmend",
            "group": "3_amend@1"
          },
          {
            "command": "git.commitStagedAmend",
            "group": "3_amend@2"
          },
          {
            "command": "git.commitAllAmend",
            "group": "3_amend@3"
          },
          {
            "command": "git.commitAmendNoVerify",
            "group": "4_amend_noverify@1",
            "when": "config.git.allowNoVerifyCommit"
          },
          {
            "command": "git.commitStagedAmendNoVerify",
            "group": "4_amend_noverify@2",
            "when": "config.git.allowNoVerifyCommit"
          },
          {
            "command": "git.commitAllAmendNoVerify",
            "group": "4_amend_noverify@3",
            "when": "config.git.allowNoVerifyCommit"
          },
          {
            "command": "git.commitSigned",
            "group": "5_signoff@1"
          },
          {
            "command": "git.commitStagedSigned",
            "group": "5_signoff@2"
          },
          {
            "command": "git.commitAllSigned",
            "group": "5_signoff@3"
          },
          {
            "command": "git.commitSignedNoVerify",
            "group": "6_signoff_noverify@1",
            "when": "config.git.allowNoVerifyCommit"
          },
          {
            "command": "git.commitStagedSignedNoVerify",
            "group": "6_signoff_noverify@2",
            "when": "config.git.allowNoVerifyCommit"
          },
          {
            "command": "git.commitAllSignedNoVerify",
            "group": "6_signoff_noverify@3",
            "when": "config.git.allowNoVerifyCommit"
          }
        ],
        "git.changes": [
          {
            "command": "git.stageAll",
            "group": "changes@1"
          },
          {
            "command": "git.unstageAll",
            "group": "changes@2"
          },
          {
            "command": "git.cleanAll",
            "group": "changes@3"
          }
        ],
        "git.pullpush": [
          {
            "command": "git.sync",
            "group": "1_sync@1"
          },
          {
            "command": "git.syncRebase",
            "when": "gitState == idle",
            "group": "1_sync@2"
          },
          {
            "command": "git.pull",
            "group": "2_pull@1"
          },
          {
            "command": "git.pullRebase",
            "group": "2_pull@2"
          },
          {
            "command": "git.pullFrom",
            "group": "2_pull@3"
          },
          {
            "command": "git.push",
            "group": "3_push@1"
          },
          {
            "command": "git.pushForce",
            "when": "config.git.allowForcePush",
            "group": "3_push@2"
          },
          {
            "command": "git.pushTo",
            "group": "3_push@3"
          },
          {
            "command": "git.pushToForce",
            "when": "config.git.allowForcePush",
            "group": "3_push@4"
          },
          {
            "command": "git.fetch",
            "group": "4_fetch@1"
          },
          {
            "command": "git.fetchPrune",
            "group": "4_fetch@2"
          },
          {
            "command": "git.fetchAll",
            "group": "4_fetch@3"
          }
        ],
        "git.branch": [
          {
            "command": "git.merge",
            "group": "1_merge@1"
          },
          {
            "command": "git.rebase",
            "group": "1_merge@2"
          },
          {
            "command": "git.branch",
            "group": "2_branch@1"
          },
          {
            "command": "git.branchFrom",
            "group": "2_branch@2"
          },
          {
            "command": "git.renameBranch",
            "group": "3_modify@1"
          },
          {
            "command": "git.deleteBranch",
            "group": "3_modify@2"
          },
          {
            "command": "git.publish",
            "group": "4_publish@1"
          }
        ],
        "git.remotes": [
          {
            "command": "git.addRemote",
            "group": "remote@1"
          },
          {
            "command": "git.removeRemote",
            "group": "remote@2"
          }
        ],
        "git.stash": [
          {
            "command": "git.stash",
            "group": "1_stash@1"
          },
          {
            "command": "git.stashIncludeUntracked",
            "group": "1_stash@2"
          },
          {
            "command": "git.stashStaged",
            "when": "gitVersion2.35",
            "group": "1_stash@3"
          },
          {
            "command": "git.stashApplyLatest",
            "group": "2_apply@1"
          },
          {
            "command": "git.stashApply",
            "group": "2_apply@2"
          },
          {
            "command": "git.stashPopLatest",
            "group": "3_pop@1"
          },
          {
            "command": "git.stashPop",
            "group": "3_pop@2"
          },
          {
            "command": "git.stashDrop",
            "group": "4_drop@1"
          },
          {
            "command": "git.stashDropAll",
            "group": "4_drop@2"
          },
          {
            "command": "git.stashView",
            "when": "config.multiDiffEditor.experimental.enabled",
            "group": "5_preview@1"
          }
        ],
        "git.tags": [
          {
            "command": "git.createTag",
            "group": "tags@1"
          },
          {
            "command": "git.deleteTag",
            "group": "tags@2"
          },
          {
            "command": "git.deleteRemoteTag",
            "group": "tags@3"
          }
        ]
      },
      "submenus": [
        {
          "id": "git.commit",
          "label": "%submenu.commit%"
        },
        {
          "id": "git.changes",
          "label": "%submenu.changes%"
        },
        {
          "id": "git.pullpush",
          "label": "%submenu.pullpush%"
        },
        {
          "id": "git.branch",
          "label": "%submenu.branch%"
        },
        {
          "id": "git.remotes",
          "label": "%submenu.remotes%"
        },
        {
          "id": "git.stash",
          "label": "%submenu.stash%"
        },
        {
          "id": "git.tags",
          "label": "%submenu.tags%"
        }
      ],
      "configuration": {
        "title": "Git",
        "properties": {
          "git.enabled": {
            "type": "boolean",
            "scope": "resource",
            "description": "%config.enabled%",
            "default": true
          },
          "git.path": {
            "type": [
              "string",
              "null",
              "array"
            ],
            "markdownDescription": "%config.path%",
            "default": null,
            "scope": "machine"
          },
          "git.autoRepositoryDetection": {
            "type": [
              "boolean",
              "string"
            ],
            "enum": [
              true,
              false,
              "subFolders",
              "openEditors"
            ],
            "enumDescriptions": [
              "%config.autoRepositoryDetection.true%",
              "%config.autoRepositoryDetection.false%",
              "%config.autoRepositoryDetection.subFolders%",
              "%config.autoRepositoryDetection.openEditors%"
            ],
            "description": "%config.autoRepositoryDetection%",
            "default": true
          },
          "git.autorefresh": {
            "type": "boolean",
            "description": "%config.autorefresh%",
            "default": true
          },
          "git.autofetch": {
            "type": [
              "boolean",
              "string"
            ],
            "enum": [
              true,
              false,
              "all"
            ],
            "scope": "resource",
            "markdownDescription": "%config.autofetch%",
            "default": false,
            "tags": [
              "usesOnlineServices"
            ]
          },
          "git.autofetchPeriod": {
            "type": "number",
            "scope": "resource",
            "markdownDescription": "%config.autofetchPeriod%",
            "default": 180
          },
          "git.defaultBranchName": {
            "type": "string",
            "markdownDescription": "%config.defaultBranchName%",
            "default": "main",
            "scope": "resource"
          },
          "git.branchPrefix": {
            "type": "string",
            "description": "%config.branchPrefix%",
            "default": "",
            "scope": "resource"
          },
          "git.branchProtection": {
            "type": "array",
            "markdownDescription": "%config.branchProtection%",
            "items": {
              "type": "string"
            },
            "default": [],
            "scope": "resource"
          },
          "git.branchProtectionPrompt": {
            "type": "string",
            "description": "%config.branchProtectionPrompt%",
            "enum": [
              "alwaysCommit",
              "alwaysCommitToNewBranch",
              "alwaysPrompt"
            ],
            "enumDescriptions": [
              "%config.branchProtectionPrompt.alwaysCommit%",
              "%config.branchProtectionPrompt.alwaysCommitToNewBranch%",
              "%config.branchProtectionPrompt.alwaysPrompt%"
            ],
            "default": "alwaysPrompt",
            "scope": "resource"
          },
          "git.branchValidationRegex": {
            "type": "string",
            "description": "%config.branchValidationRegex%",
            "default": ""
          },
          "git.branchWhitespaceChar": {
            "type": "string",
            "description": "%config.branchWhitespaceChar%",
            "default": "-"
          },
          "git.branchRandomName.enable": {
            "type": "boolean",
            "description": "%config.branchRandomNameEnable%",
            "default": false,
            "scope": "resource"
          },
          "git.branchRandomName.dictionary": {
            "type": "array",
            "markdownDescription": "%config.branchRandomNameDictionary%",
            "items": {
              "type": "string",
              "enum": [
                "adjectives",
                "animals",
                "colors",
                "numbers"
              ],
              "enumDescriptions": [
                "%config.branchRandomNameDictionary.adjectives%",
                "%config.branchRandomNameDictionary.animals%",
                "%config.branchRandomNameDictionary.colors%",
                "%config.branchRandomNameDictionary.numbers%"
              ]
            },
            "minItems": 1,
            "maxItems": 5,
            "default": [
              "adjectives",
              "animals"
            ],
            "scope": "resource"
          },
          "git.confirmSync": {
            "type": "boolean",
            "description": "%config.confirmSync%",
            "default": true
          },
          "git.countBadge": {
            "type": "string",
            "enum": [
              "all",
              "tracked",
              "off"
            ],
            "enumDescriptions": [
              "%config.countBadge.all%",
              "%config.countBadge.tracked%",
              "%config.countBadge.off%"
            ],
            "description": "%config.countBadge%",
            "default": "all",
            "scope": "resource"
          },
          "git.checkoutType": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "local",
                "tags",
                "remote"
              ],
              "enumDescriptions": [
                "%config.checkoutType.local%",
                "%config.checkoutType.tags%",
                "%config.checkoutType.remote%"
              ]
            },
            "uniqueItems": true,
            "markdownDescription": "%config.checkoutType%",
            "default": [
              "local",
              "remote",
              "tags"
            ]
          },
          "git.ignoreLegacyWarning": {
            "type": "boolean",
            "description": "%config.ignoreLegacyWarning%",
            "default": false
          },
          "git.ignoreMissingGitWarning": {
            "type": "boolean",
            "description": "%config.ignoreMissingGitWarning%",
            "default": false
          },
          "git.ignoreWindowsGit27Warning": {
            "type": "boolean",
            "description": "%config.ignoreWindowsGit27Warning%",
            "default": false
          },
          "git.ignoreLimitWarning": {
            "type": "boolean",
            "description": "%config.ignoreLimitWarning%",
            "default": false
          },
          "git.ignoreRebaseWarning": {
            "type": "boolean",
            "description": "%config.ignoreRebaseWarning%",
            "default": false
          },
          "git.defaultCloneDirectory": {
            "type": [
              "string",
              "null"
            ],
            "default": null,
            "scope": "machine",
            "description": "%config.defaultCloneDirectory%"
          },
          "git.useEditorAsCommitInput": {
            "type": "boolean",
            "description": "%config.useEditorAsCommitInput%",
            "default": true
          },
          "git.verboseCommit": {
            "type": "boolean",
            "scope": "resource",
            "markdownDescription": "%config.verboseCommit%",
            "default": false
          },
          "git.enableSmartCommit": {
            "type": "boolean",
            "scope": "resource",
            "description": "%config.enableSmartCommit%",
            "default": false
          },
          "git.smartCommitChanges": {
            "type": "string",
            "enum": [
              "all",
              "tracked"
            ],
            "enumDescriptions": [
              "%config.smartCommitChanges.all%",
              "%config.smartCommitChanges.tracked%"
            ],
            "scope": "resource",
            "description": "%config.smartCommitChanges%",
            "default": "all"
          },
          "git.suggestSmartCommit": {
            "type": "boolean",
            "scope": "resource",
            "description": "%config.suggestSmartCommit%",
            "default": true
          },
          "git.enableCommitSigning": {
            "type": "boolean",
            "scope": "resource",
            "description": "%config.enableCommitSigning%",
            "default": false
          },
          "git.confirmEmptyCommits": {
            "type": "boolean",
            "scope": "resource",
            "description": "%config.confirmEmptyCommits%",
            "default": true
          },
          "git.decorations.enabled": {
            "type": "boolean",
            "default": true,
            "description": "%config.decorations.enabled%"
          },
          "git.enableStatusBarSync": {
            "type": "boolean",
            "default": true,
            "description": "%config.enableStatusBarSync%",
            "scope": "resource"
          },
          "git.followTagsWhenSync": {
            "type": "boolean",
            "scope": "resource",
            "default": false,
            "description": "%config.followTagsWhenSync%"
          },
          "git.replaceTagsWhenPull": {
            "type": "boolean",
            "scope": "resource",
            "default": false,
            "description": "%config.replaceTagsWhenPull%"
          },
          "git.promptToSaveFilesBeforeStash": {
            "type": "string",
            "enum": [
              "always",
              "staged",
              "never"
            ],
            "enumDescriptions": [
              "%config.promptToSaveFilesBeforeStash.always%",
              "%config.promptToSaveFilesBeforeStash.staged%",
              "%config.promptToSaveFilesBeforeStash.never%"
            ],
            "scope": "resource",
            "default": "always",
            "description": "%config.promptToSaveFilesBeforeStash%"
          },
          "git.promptToSaveFilesBeforeCommit": {
            "type": "string",
            "enum": [
              "always",
              "staged",
              "never"
            ],
            "enumDescriptions": [
              "%config.promptToSaveFilesBeforeCommit.always%",
              "%config.promptToSaveFilesBeforeCommit.staged%",
              "%config.promptToSaveFilesBeforeCommit.never%"
            ],
            "scope": "resource",
            "default": "always",
            "description": "%config.promptToSaveFilesBeforeCommit%"
          },
          "git.postCommitCommand": {
            "type": "string",
            "enum": [
              "none",
              "push",
              "sync"
            ],
            "enumDescriptions": [
              "%config.postCommitCommand.none%",
              "%config.postCommitCommand.push%",
              "%config.postCommitCommand.sync%"
            ],
            "markdownDescription": "%config.postCommitCommand%",
            "scope": "resource",
            "default": "none"
          },
          "git.rememberPostCommitCommand": {
            "type": "boolean",
            "description": "%config.rememberPostCommitCommand%",
            "scope": "resource",
            "default": false
          },
          "git.openAfterClone": {
            "type": "string",
            "enum": [
              "always",
              "alwaysNewWindow",
              "whenNoFolderOpen",
              "prompt"
            ],
            "enumDescriptions": [
              "%config.openAfterClone.always%",
              "%config.openAfterClone.alwaysNewWindow%",
              "%config.openAfterClone.whenNoFolderOpen%",
              "%config.openAfterClone.prompt%"
            ],
            "default": "prompt",
            "description": "%config.openAfterClone%"
          },
          "git.showInlineOpenFileAction": {
            "type": "boolean",
            "default": true,
            "description": "%config.showInlineOpenFileAction%"
          },
          "git.showPushSuccessNotification": {
            "type": "boolean",
            "description": "%config.showPushSuccessNotification%",
            "default": false
          },
          "git.inputValidation": {
            "type": "boolean",
            "default": false,
            "description": "%config.inputValidation%"
          },
          "git.inputValidationLength": {
            "type": "number",
            "default": 72,
            "description": "%config.inputValidationLength%"
          },
          "git.inputValidationSubjectLength": {
            "type": [
              "number",
              "null"
            ],
            "default": 50,
            "markdownDescription": "%config.inputValidationSubjectLength%"
          },
          "git.detectSubmodules": {
            "type": "boolean",
            "scope": "resource",
            "default": true,
            "description": "%config.detectSubmodules%"
          },
          "git.detectSubmodulesLimit": {
            "type": "number",
            "scope": "resource",
            "default": 10,
            "description": "%config.detectSubmodulesLimit%"
          },
          "git.alwaysShowStagedChangesResourceGroup": {
            "type": "boolean",
            "scope": "resource",
            "default": false,
            "description": "%config.alwaysShowStagedChangesResourceGroup%"
          },
          "git.alwaysSignOff": {
            "type": "boolean",
            "scope": "resource",
            "default": false,
            "description": "%config.alwaysSignOff%"
          },
          "git.ignoreSubmodules": {
            "type": "boolean",
            "scope": "resource",
            "default": false,
            "description": "%config.ignoreSubmodules%"
          },
          "git.ignoredRepositories": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": [],
            "scope": "window",
            "description": "%config.ignoredRepositories%"
          },
          "git.scanRepositories": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": [],
            "scope": "resource",
            "description": "%config.scanRepositories%"
          },
          "git.showProgress": {
            "type": "boolean",
            "description": "%config.showProgress%",
            "default": true,
            "scope": "resource"
          },
          "git.rebaseWhenSync": {
            "type": "boolean",
            "scope": "resource",
            "default": false,
            "description": "%config.rebaseWhenSync%"
          },
          "git.pullBeforeCheckout": {
            "type": "boolean",
            "scope": "resource",
            "default": false,
            "description": "%config.pullBeforeCheckout%"
          },
          "git.fetchOnPull": {
            "type": "boolean",
            "scope": "resource",
            "default": false,
            "description": "%config.fetchOnPull%"
          },
          "git.pruneOnFetch": {
            "type": "boolean",
            "scope": "resource",
            "default": false,
            "description": "%config.pruneOnFetch%"
          },
          "git.pullTags": {
            "type": "boolean",
            "scope": "resource",
            "default": true,
            "description": "%config.pullTags%"
          },
          "git.autoStash": {
            "type": "boolean",
            "scope": "resource",
            "default": false,
            "description": "%config.autoStash%"
          },
          "git.allowForcePush": {
            "type": "boolean",
            "default": false,
            "description": "%config.allowForcePush%"
          },
          "git.useForcePushWithLease": {
            "type": "boolean",
            "default": true,
            "description": "%config.useForcePushWithLease%"
          },
          "git.useForcePushIfIncludes": {
            "type": "boolean",
            "default": true,
            "markdownDescription": "%config.useForcePushIfIncludes%"
          },
          "git.confirmForcePush": {
            "type": "boolean",
            "default": true,
            "description": "%config.confirmForcePush%"
          },
          "git.allowNoVerifyCommit": {
            "type": "boolean",
            "default": false,
            "description": "%config.allowNoVerifyCommit%"
          },
          "git.confirmNoVerifyCommit": {
            "type": "boolean",
            "default": true,
            "description": "%config.confirmNoVerifyCommit%"
          },
          "git.closeDiffOnOperation": {
            "type": "boolean",
            "scope": "resource",
            "default": false,
            "description": "%config.closeDiffOnOperation%"
          },
          "git.openDiffOnClick": {
            "type": "boolean",
            "scope": "resource",
            "default": true,
            "description": "%config.openDiffOnClick%"
          },
          "git.supportCancellation": {
            "type": "boolean",
            "scope": "resource",
            "default": false,
            "description": "%config.supportCancellation%"
          },
          "git.branchSortOrder": {
            "type": "string",
            "enum": [
              "committerdate",
              "alphabetically"
            ],
            "default": "committerdate",
            "description": "%config.branchSortOrder%"
          },
          "git.untrackedChanges": {
            "type": "string",
            "enum": [
              "mixed",
              "separate",
              "hidden"
            ],
            "enumDescriptions": [
              "%config.untrackedChanges.mixed%",
              "%config.untrackedChanges.separate%",
              "%config.untrackedChanges.hidden%"
            ],
            "default": "mixed",
            "description": "%config.untrackedChanges%",
            "scope": "resource"
          },
          "git.requireGitUserConfig": {
            "type": "boolean",
            "description": "%config.requireGitUserConfig%",
            "default": true,
            "scope": "resource"
          },
          "git.showCommitInput": {
            "type": "boolean",
            "scope": "resource",
            "default": true,
            "description": "%config.showCommitInput%"
          },
          "git.terminalAuthentication": {
            "type": "boolean",
            "default": true,
            "description": "%config.terminalAuthentication%"
          },
          "git.terminalGitEditor": {
            "type": "boolean",
            "default": false,
            "description": "%config.terminalGitEditor%"
          },
          "git.useCommitInputAsStashMessage": {
            "type": "boolean",
            "scope": "resource",
            "default": false,
            "description": "%config.useCommitInputAsStashMessage%"
          },
          "git.useIntegratedAskPass": {
            "type": "boolean",
            "default": true,
            "description": "%config.useIntegratedAskPass%"
          },
          "git.githubAuthentication": {
            "markdownDeprecationMessage": "This setting is now deprecated, please use `#github.gitAuthentication#` instead."
          },
          "git.timeline.date": {
            "type": "string",
            "enum": [
              "committed",
              "authored"
            ],
            "enumDescriptions": [
              "%config.timeline.date.committed%",
              "%config.timeline.date.authored%"
            ],
            "default": "committed",
            "description": "%config.timeline.date%",
            "scope": "window"
          },
          "git.timeline.showAuthor": {
            "type": "boolean",
            "default": true,
            "description": "%config.timeline.showAuthor%",
            "scope": "window"
          },
          "git.timeline.showUncommitted": {
            "type": "boolean",
            "default": false,
            "description": "%config.timeline.showUncommitted%",
            "scope": "window"
          },
          "git.showActionButton": {
            "type": "object",
            "additionalProperties": false,
            "description": "%config.showActionButton%",
            "properties": {
              "commit": {
                "type": "boolean",
                "description": "%config.showActionButton.commit%"
              },
              "publish": {
                "type": "boolean",
                "description": "%config.showActionButton.publish%"
              },
              "sync": {
                "type": "boolean",
                "description": "%config.showActionButton.sync%"
              }
            },
            "default": {
              "commit": true,
              "publish": true,
              "sync": true
            },
            "scope": "resource"
          },
          "git.statusLimit": {
            "type": "number",
            "scope": "resource",
            "default": 10000,
            "description": "%config.statusLimit%"
          },
          "git.repositoryScanIgnoredFolders": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": [
              "node_modules"
            ],
            "scope": "resource",
            "markdownDescription": "%config.repositoryScanIgnoredFolders%"
          },
          "git.repositoryScanMaxDepth": {
            "type": "number",
            "scope": "resource",
            "default": 1,
            "markdownDescription": "%config.repositoryScanMaxDepth%"
          },
          "git.commandsToLog": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": [],
            "markdownDescription": "%config.commandsToLog%"
          },
          "git.mergeEditor": {
            "type": "boolean",
            "default": false,
            "markdownDescription": "%config.mergeEditor%",
            "scope": "window"
          },
          "git.optimisticUpdate": {
            "type": "boolean",
            "default": true,
            "markdownDescription": "%config.optimisticUpdate%",
            "scope": "resource",
            "tags": [
              "experimental"
            ]
          },
          "git.openRepositoryInParentFolders": {
            "type": "string",
            "enum": [
              "always",
              "never",
              "prompt"
            ],
            "enumDescriptions": [
              "%config.openRepositoryInParentFolders.always%",
              "%config.openRepositoryInParentFolders.never%",
              "%config.openRepositoryInParentFolders.prompt%"
            ],
            "default": "prompt",
            "markdownDescription": "%config.openRepositoryInParentFolders%",
            "scope": "resource"
          },
          "git.similarityThreshold": {
            "type": "number",
            "default": 50,
            "minimum": 0,
            "maximum": 100,
            "markdownDescription": "%config.similarityThreshold%",
            "scope": "resource"
          }
        }
      },
      "colors": [
        {
          "id": "gitDecoration.addedResourceForeground",
          "description": "%colors.added%",
          "defaults": {
            "light": "#587c0c",
            "dark": "#81b88b",
            "highContrast": "#a1e3ad",
            "highContrastLight": "#374e06"
          }
        },
        {
          "id": "gitDecoration.modifiedResourceForeground",
          "description": "%colors.modified%",
          "defaults": {
            "light": "#895503",
            "dark": "#E2C08D",
            "highContrast": "#E2C08D",
            "highContrastLight": "#895503"
          }
        },
        {
          "id": "gitDecoration.deletedResourceForeground",
          "description": "%colors.deleted%",
          "defaults": {
            "light": "#ad0707",
            "dark": "#c74e39",
            "highContrast": "#c74e39",
            "highContrastLight": "#ad0707"
          }
        },
        {
          "id": "gitDecoration.renamedResourceForeground",
          "description": "%colors.renamed%",
          "defaults": {
            "light": "#007100",
            "dark": "#73C991",
            "highContrast": "#73C991",
            "highContrastLight": "#007100"
          }
        },
        {
          "id": "gitDecoration.untrackedResourceForeground",
          "description": "%colors.untracked%",
          "defaults": {
            "light": "#007100",
            "dark": "#73C991",
            "highContrast": "#73C991",
            "highContrastLight": "#007100"
          }
        },
        {
          "id": "gitDecoration.ignoredResourceForeground",
          "description": "%colors.ignored%",
          "defaults": {
            "light": "#8E8E90",
            "dark": "#8C8C8C",
            "highContrast": "#A7A8A9",
            "highContrastLight": "#8e8e90"
          }
        },
        {
          "id": "gitDecoration.stageModifiedResourceForeground",
          "description": "%colors.stageModified%",
          "defaults": {
            "light": "#895503",
            "dark": "#E2C08D",
            "highContrast": "#E2C08D",
            "highContrastLight": "#895503"
          }
        },
        {
          "id": "gitDecoration.stageDeletedResourceForeground",
          "description": "%colors.stageDeleted%",
          "defaults": {
            "light": "#ad0707",
            "dark": "#c74e39",
            "highContrast": "#c74e39",
            "highContrastLight": "#ad0707"
          }
        },
        {
          "id": "gitDecoration.conflictingResourceForeground",
          "description": "%colors.conflict%",
          "defaults": {
            "light": "#ad0707",
            "dark": "#e4676b",
            "highContrast": "#c74e39",
            "highContrastLight": "#ad0707"
          }
        },
        {
          "id": "gitDecoration.submoduleResourceForeground",
          "description": "%colors.submodule%",
          "defaults": {
            "light": "#1258a7",
            "dark": "#8db9e2",
            "highContrast": "#8db9e2",
            "highContrastLight": "#1258a7"
          }
        }
      ],
      "configurationDefaults": {
        "[git-commit]": {
          "editor.rulers": [
            50,
            72
          ],
          "editor.wordWrap": "off",
          "workbench.editor.restoreViewState": false
        },
        "[git-rebase]": {
          "workbench.editor.restoreViewState": false
        }
      },
      "viewsWelcome": [
        {
          "view": "scm",
          "contents": "%view.workbench.scm.disabled%",
          "when": "!config.git.enabled"
        },
        {
          "view": "scm",
          "contents": "%view.workbench.scm.missing%",
          "when": "config.git.enabled && git.missing"
        },
        {
          "view": "scm",
          "contents": "%view.workbench.scm.missing.mac%",
          "when": "config.git.enabled && git.missing && isMac"
        },
        {
          "view": "scm",
          "contents": "%view.workbench.scm.missing.windows%",
          "when": "config.git.enabled && git.missing && isWindows"
        },
        {
          "view": "scm",
          "contents": "%view.workbench.scm.missing.linux%",
          "when": "config.git.enabled && git.missing && isLinux"
        },
        {
          "view": "scm",
          "contents": "%view.workbench.scm.empty%",
          "when": "config.git.enabled && !git.missing && workbenchState == empty && git.parentRepositoryCount == 0 && git.unsafeRepositoryCount == 0 && git.closedRepositoryCount == 0",
          "enablement": "git.state == initialized",
          "group": "2_open@1"
        },
        {
          "view": "scm",
          "contents": "%view.workbench.scm.emptyWorkspace%",
          "when": "config.git.enabled && !git.missing && workbenchState == workspace && workspaceFolderCount == 0 && git.parentRepositoryCount == 0 && git.unsafeRepositoryCount == 0 && git.closedRepositoryCount == 0",
          "enablement": "git.state == initialized",
          "group": "2_open@1"
        },
        {
          "view": "scm",
          "contents": "%view.workbench.scm.scanFolderForRepositories%",
          "when": "config.git.enabled && !git.missing && workbenchState == folder && workspaceFolderCount != 0 && git.state != initialized"
        },
        {
          "view": "scm",
          "contents": "%view.workbench.scm.scanWorkspaceForRepositories%",
          "when": "config.git.enabled && !git.missing && workbenchState == workspace && workspaceFolderCount != 0 && git.state != initialized"
        },
        {
          "view": "scm",
          "contents": "%view.workbench.scm.folder%",
          "when": "config.git.enabled && !git.missing && git.state == initialized && workbenchState == folder && scm.providerCount == 0 && git.parentRepositoryCount == 0 && git.unsafeRepositoryCount == 0 && git.closedRepositoryCount == 0 && remoteName != 'codespaces'",
          "group": "5_scm@1"
        },
        {
          "view": "scm",
          "contents": "%view.workbench.scm.workspace%",
          "when": "config.git.enabled && !git.missing && git.state == initialized && workbenchState == workspace && workspaceFolderCount != 0 && scm.providerCount == 0 && git.parentRepositoryCount == 0 && git.unsafeRepositoryCount == 0 && git.closedRepositoryCount == 0 && remoteName != 'codespaces'",
          "group": "5_scm@1"
        },
        {
          "view": "scm",
          "contents": "%view.workbench.scm.repositoryInParentFolders%",
          "when": "config.git.enabled && !git.missing && git.state == initialized && git.parentRepositoryCount == 1"
        },
        {
          "view": "scm",
          "contents": "%view.workbench.scm.repositoriesInParentFolders%",
          "when": "config.git.enabled && !git.missing && git.state == initialized && git.parentRepositoryCount > 1"
        },
        {
          "view": "scm",
          "contents": "%view.workbench.scm.unsafeRepository%",
          "when": "config.git.enabled && !git.missing && git.state == initialized && git.unsafeRepositoryCount == 1"
        },
        {
          "view": "scm",
          "contents": "%view.workbench.scm.unsafeRepositories%",
          "when": "config.git.enabled && !git.missing && git.state == initialized && git.unsafeRepositoryCount > 1"
        },
        {
          "view": "scm",
          "contents": "%view.workbench.scm.closedRepository%",
          "when": "config.git.enabled && !git.missing && git.state == initialized && git.closedRepositoryCount == 1"
        },
        {
          "view": "scm",
          "contents": "%view.workbench.scm.closedRepositories%",
          "when": "config.git.enabled && !git.missing && git.state == initialized && git.closedRepositoryCount > 1"
        },
        {
          "view": "explorer",
          "contents": "%view.workbench.cloneRepository%",
          "when": "config.git.enabled && git.state == initialized && scm.providerCount == 0",
          "group": "5_scm@1"
        },
        {
          "view": "explorer",
          "contents": "%view.workbench.learnMore%",
          "when": "config.git.enabled && git.state == initialized && scm.providerCount == 0",
          "group": "5_scm@10"
        }
      ]
    },
    "dependencies": {
      "@joaomoreno/unique-names-generator": "^5.1.0",
      "@vscode/extension-telemetry": "^0.9.0",
      "@vscode/iconv-lite-umd": "0.7.0",
      "byline": "^5.0.0",
      "file-type": "16.5.4",
      "jschardet": "3.1.3",
      "picomatch": "2.3.1",
      "vscode-uri": "^2.0.0",
      "which": "4.0.0"
    },
    "devDependencies": {
      "@types/byline": "4.2.31",
      "@types/mocha": "^9.1.1",
      "@types/node": "20.x",
      "@types/picomatch": "2.3.0",
      "@types/which": "3.0.0"
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/microsoft/vscode.git"
    }
  }

yarn manifest: 
  No manifest

Lockfile: 
  # THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
  # yarn lockfile v1
  
  
  "@joaomoreno/unique-names-generator@^5.1.0":
    version "5.1.0"
    resolved "https://registry.yarnpkg.com/@joaomoreno/unique-names-generator/-/unique-names-generator-5.1.0.tgz#d577d425aed794c44c0e8863cddd5dea349f74f3"
    integrity sha512-KEVThTpUIKPb7dBKJ9mJ3WYnD1mJZZsEinCSp9CVEPlWbDagurFv1RKRjvvujrLfJzsGc0HkBHS9W8Bughao4A==
  
  "@microsoft/1ds-core-js@4.0.3", "@microsoft/1ds-core-js@^4.0.3":
    version "4.0.3"
    resolved "https://registry.yarnpkg.com/@microsoft/1ds-core-js/-/1ds-core-js-4.0.3.tgz#c8a92c623745a9595e06558a866658480c33bdf9"
    integrity sha512-FrxNLVAPsAvD7+l63TlNS/Kodvpct2WulpDSn1dI4Xuy0kF4E2H867kHdwL/iY1Bj3zA3FSy/jvE4+OcDws7ug==
    dependencies:
      "@microsoft/applicationinsights-core-js" "3.0.4"
      "@microsoft/applicationinsights-shims" "3.0.1"
      "@microsoft/dynamicproto-js" "^2.0.2"
      "@nevware21/ts-async" ">= 0.3.0 < 2.x"
      "@nevware21/ts-utils" ">= 0.10.1 < 2.x"
  
  "@microsoft/1ds-post-js@^4.0.3":
    version "4.0.3"
    resolved "https://registry.yarnpkg.com/@microsoft/1ds-post-js/-/1ds-post-js-4.0.3.tgz#cfcb20bb23fb6215d3f0732f60f5b7df3e624f86"
    integrity sha512-uewvmUtXKd7ttypiKQGdYI6i7UUpPkOznLayzIFrJ4r2xnG6jhPjpKRncHFXPQcM4XSWO3yf5PQ3xAbPq9t7ZQ==
    dependencies:
      "@microsoft/1ds-core-js" "4.0.3"
      "@microsoft/applicationinsights-shims" "3.0.1"
      "@microsoft/dynamicproto-js" "^2.0.2"
      "@nevware21/ts-async" ">= 0.3.0 < 2.x"
      "@nevware21/ts-utils" ">= 0.10.1 < 2.x"
  
  "@microsoft/applicationinsights-channel-js@3.0.4":
    version "3.0.4"
    resolved "https://registry.yarnpkg.com/@microsoft/applicationinsights-channel-js/-/applicationinsights-channel-js-3.0.4.tgz#247b6fe2158fad9826cbcdf7304f885766b36624"
    integrity sha512-6TlfExmErQ8Y+/ChbkyWl+jyt4wg3T6p7lwXDsUCB0LgZmlEWMaCUS0YlT73JCWmE8j7vxW8yUm0lgsgmHns3A==
    dependencies:
      "@microsoft/applicationinsights-common" "3.0.4"
      "@microsoft/applicationinsights-core-js" "3.0.4"
      "@microsoft/applicationinsights-shims" "3.0.1"
      "@microsoft/dynamicproto-js" "^2.0.2"
      "@nevware21/ts-async" ">= 0.3.0 < 2.x"
      "@nevware21/ts-utils" ">= 0.10.1 < 2.x"
  
  "@microsoft/applicationinsights-common@3.0.4":
    version "3.0.4"
    resolved "https://registry.yarnpkg.com/@microsoft/applicationinsights-common/-/applicationinsights-common-3.0.4.tgz#c4aa53ba343f5b3c7fbf54cddd3c86a5bdcd95dc"
    integrity sha512-r5gWaw/K9+tKfuo2GtDiDiKASgOkPOCrKW+wZzFvuR06uuwvWjbVQ6yW/YbnfuhRF5M65ksUiMi0eCMwEOGq7Q==
    dependencies:
      "@microsoft/applicationinsights-core-js" "3.0.4"
      "@microsoft/applicationinsights-shims" "3.0.1"
      "@microsoft/dynamicproto-js" "^2.0.2"
      "@nevware21/ts-utils" ">= 0.10.1 < 2.x"
  
  "@microsoft/applicationinsights-core-js@3.0.4":
    version "3.0.4"
    resolved "https://registry.yarnpkg.com/@microsoft/applicationinsights-core-js/-/applicationinsights-core-js-3.0.4.tgz#008308b786930d94a1de8a1fbb4af0351b74653e"
    integrity sha512-anxy5kEkqBmVoEqJiJzaaXXA0wzqZi9U4zGd05xFJ04lWckP8dG3zyT3+GGdg7rDelqLTNGxndeYoFmDv63u1g==
    dependencies:
      "@microsoft/applicationinsights-shims" "3.0.1"
      "@microsoft/dynamicproto-js" "^2.0.2"
      "@nevware21/ts-async" ">= 0.3.0 < 2.x"
      "@nevware21/ts-utils" ">= 0.10.1 < 2.x"
  
  "@microsoft/applicationinsights-shims@3.0.1":
    version "3.0.1"
    resolved "https://registry.yarnpkg.com/@microsoft/applicationinsights-shims/-/applicationinsights-shims-3.0.1.tgz#3865b73ace8405b9c4618cc5c571f2fe3876f06f"
    integrity sha512-DKwboF47H1nb33rSUfjqI6ryX29v+2QWcTrRvcQDA32AZr5Ilkr7whOOSsD1aBzwqX0RJEIP1Z81jfE3NBm/Lg==
    dependencies:
      "@nevware21/ts-utils" ">= 0.9.4 < 2.x"
  
  "@microsoft/applicationinsights-web-basic@^3.0.4":
    version "3.0.4"
    resolved "https://registry.yarnpkg.com/@microsoft/applicationinsights-web-basic/-/applicationinsights-web-basic-3.0.4.tgz#9a23323276b4a5a0dc6a352e2de5d75e3c16b534"
    integrity sha512-KfoxPlLlf0JT12ADb23C5iGye/yFouoMgHEKULxkSQcYY9SsW/8rVrqqvoYKAL+u215CZU2A8Kc8sR3ehEaPCQ==
    dependencies:
      "@microsoft/applicationinsights-channel-js" "3.0.4"
      "@microsoft/applicationinsights-common" "3.0.4"
      "@microsoft/applicationinsights-core-js" "3.0.4"
      "@microsoft/applicationinsights-shims" "3.0.1"
      "@microsoft/dynamicproto-js" "^2.0.2"
      "@nevware21/ts-async" ">= 0.3.0 < 2.x"
      "@nevware21/ts-utils" ">= 0.10.1 < 2.x"
  
  "@microsoft/dynamicproto-js@^2.0.2":
    version "2.0.2"
    resolved "https://registry.yarnpkg.com/@microsoft/dynamicproto-js/-/dynamicproto-js-2.0.2.tgz#e57fbec2e7067d48b7e8e1e1c1d354028ef718a6"
    integrity sha512-MB8trWaFREpmb037k/d0bB7T2BP7Ai24w1e1tbz3ASLB0/lwphsq3Nq8S9I5AsI5vs4zAQT+SB5nC5/dLYTiOg==
    dependencies:
      "@nevware21/ts-utils" ">= 0.9.4 < 2.x"
  
  "@nevware21/ts-async@>= 0.3.0 < 2.x":
    version "0.3.0"
    resolved "https://registry.yarnpkg.com/@nevware21/ts-async/-/ts-async-0.3.0.tgz#a8b97ba01065fc930de9a3f4dd4a05e862becc6c"
    integrity sha512-ZUcgUH12LN/F6nzN0cYd0F/rJaMLmXr0EHVTyYfaYmK55bdwE4338uue4UiVoRqHVqNW4KDUrJc49iGogHKeWA==
    dependencies:
      "@nevware21/ts-utils" ">= 0.10.0 < 2.x"
  
  "@nevware21/ts-utils@>= 0.10.0 < 2.x", "@nevware21/ts-utils@>= 0.10.1 < 2.x", "@nevware21/ts-utils@>= 0.9.4 < 2.x":
    version "0.10.1"
    resolved "https://registry.yarnpkg.com/@nevware21/ts-utils/-/ts-utils-0.10.1.tgz#aa65abc71eba06749a396598f22263d26f796ac7"
    integrity sha512-pMny25NnF2/MJwdqC3Iyjm2pGIXNxni4AROpcqDeWa+td9JMUY4bUS9uU9XW+BoBRqTLUL+WURF9SOd/6OQzRg==
  
  "@tokenizer/token@^0.3.0":
    version "0.3.0"
    resolved "https://registry.yarnpkg.com/@tokenizer/token/-/token-0.3.0.tgz#fe98a93fe789247e998c75e74e9c7c63217aa276"
    integrity sha512-OvjF+z51L3ov0OyAU0duzsYuvO01PH7x4t6DJx+guahgTnBHkhJdG7soQeTSFLWN3efnHyibZ4Z8l2EuWwJN3A==
  
  "@types/byline@4.2.31":
    version "4.2.31"
    resolved "https://registry.yarnpkg.com/@types/byline/-/byline-4.2.31.tgz#0e61fcb9c03e047d21c4496554c7116297ab60cd"
    integrity sha1-DmH8ucA+BH0hxEllVMcRYperYM0=
    dependencies:
      "@types/node" "*"
  
  "@types/mocha@^9.1.1":
    version "9.1.1"
    resolved "https://registry.yarnpkg.com/@types/mocha/-/mocha-9.1.1.tgz#e7c4f1001eefa4b8afbd1eee27a237fee3bf29c4"
    integrity sha512-Z61JK7DKDtdKTWwLeElSEBcWGRLY8g95ic5FoQqI9CMx0ns/Ghep3B4DfcEimiKMvtamNVULVNKEsiwV3aQmXw==
  
  "@types/node@*":
    version "8.0.51"
    resolved "https://registry.yarnpkg.com/@types/node/-/node-8.0.51.tgz#b31d716fb8d58eeb95c068a039b9b6292817d5fb"
    integrity sha512-El3+WJk2D/ppWNd2X05aiP5l2k4EwF7KwheknQZls+I26eSICoWRhRIJ56jGgw2dqNGQ5LtNajmBU2ajS28EvQ==
  
  "@types/node@20.x":
    version "20.11.24"
    resolved "https://registry.yarnpkg.com/@types/node/-/node-20.11.24.tgz#cc207511104694e84e9fb17f9a0c4c42d4517792"
    integrity sha512-Kza43ewS3xoLgCEpQrsT+xRo/EJej1y0kVYGiLFE1NEODXGzTfwiC6tXTLMQskn1X4/Rjlh0MQUvx9W+L9long==
    dependencies:
      undici-types "~5.26.4"
  
  "@types/picomatch@2.3.0":
    version "2.3.0"
    resolved "https://registry.yarnpkg.com/@types/picomatch/-/picomatch-2.3.0.tgz#75db5e75a713c5a83d5b76780c3da84a82806003"
    integrity sha512-O397rnSS9iQI4OirieAtsDqvCj4+3eY1J+EPdNTKuHuRWIfUoGyzX294o8C4KJYaLqgSrd2o60c5EqCU8Zv02g==
  
  "@types/which@3.0.0":
    version "3.0.0"
    resolved "https://registry.yarnpkg.com/@types/which/-/which-3.0.0.tgz#849afdd9fdcb0b67339b9cfc80fa6ea4e0253fc5"
    integrity sha512-ASCxdbsrwNfSMXALlC3Decif9rwDMu+80KGp5zI2RLRotfMsTv7fHL8W8VDp24wymzDyIFudhUeSCugrgRFfHQ==
  
  "@vscode/extension-telemetry@^0.9.0":
    version "0.9.0"
    resolved "https://registry.yarnpkg.com/@vscode/extension-telemetry/-/extension-telemetry-0.9.0.tgz#8c6c61e253ff304f46045f04edd60059b144417a"
    integrity sha512-37RxGHXrs3GoXPgCUKQhghEu0gxs8j27RLjQwwtSf4WhPdJKz8UrqMYzpsXlliQ05zURYmtdGZst9C6+hfWXaQ==
    dependencies:
      "@microsoft/1ds-core-js" "^4.0.3"
      "@microsoft/1ds-post-js" "^4.0.3"
      "@microsoft/applicationinsights-web-basic" "^3.0.4"
  
  "@vscode/iconv-lite-umd@0.7.0":
    version "0.7.0"
    resolved "https://registry.yarnpkg.com/@vscode/iconv-lite-umd/-/iconv-lite-umd-0.7.0.tgz#d2f1e0664ee6036408f9743fee264ea0699b0e48"
    integrity sha512-bRRFxLfg5dtAyl5XyiVWz/ZBPahpOpPrNYnnHpOpUZvam4tKH35wdhP4Kj6PbM0+KdliOsPzbGWpkxcdpNB/sg==
  
  byline@^5.0.0:
    version "5.0.0"
    resolved "https://registry.yarnpkg.com/byline/-/byline-5.0.0.tgz#741c5216468eadc457b03410118ad77de8c1ddb1"
    integrity sha1-dBxSFkaOrcRXsDQQEYrXfejB3bE=
  
  file-type@16.5.4:
    version "16.5.4"
    resolved "https://registry.yarnpkg.com/file-type/-/file-type-16.5.4.tgz#474fb4f704bee427681f98dd390058a172a6c2fd"
    integrity sha512-/yFHK0aGjFEgDJjEKP0pWCplsPFPhwyfwevf/pVxiN0tmE4L9LmwWxWukdJSHdoCli4VgQLehjJtwQBnqmsKcw==
    dependencies:
      readable-web-to-node-stream "^3.0.0"
      strtok3 "^6.2.4"
      token-types "^4.1.1"
  
  ieee754@^1.2.1:
    version "1.2.1"
    resolved "https://registry.yarnpkg.com/ieee754/-/ieee754-1.2.1.tgz#8eb7a10a63fff25d15a57b001586d177d1b0d352"
    integrity sha512-dcyqhDvX1C46lXZcVqCpK+FtMRQVdIMN6/Df5js2zouUsqG7I6sFxitIC+7KYK29KdXOLHdu9zL4sFnoVQnqaA==
  
  inherits@^2.0.3:
    version "2.0.4"
    resolved "https://registry.yarnpkg.com/inherits/-/inherits-2.0.4.tgz#0fa2c64f932917c3433a0ded55363aae37416b7c"
    integrity sha512-k/vGaX4/Yla3WzyMCvTQOXYeIHvqOKtnqBduzTHpzpQZzAskKMhZ2K+EnBiSM9zGSoIFeMpXKxa4dYeZIQqewQ==
  
  isexe@^3.1.1:
    version "3.1.1"
    resolved "https://registry.yarnpkg.com/isexe/-/isexe-3.1.1.tgz#4a407e2bd78ddfb14bea0c27c6f7072dde775f0d"
    integrity sha512-LpB/54B+/2J5hqQ7imZHfdU31OlgQqx7ZicVlkm9kzg9/w8GKLEcFfJl/t7DCEDueOyBAD6zCCwTO6Fzs0NoEQ==
  
  jschardet@3.1.3:
    version "3.1.3"
    resolved "https://registry.yarnpkg.com/jschardet/-/jschardet-3.1.3.tgz#10c2289fdae91a0aa9de8bba9c59055fd78898d3"
    integrity sha512-Q1PKVMK/uu+yjdlobgWIYkUOCR1SqUmW9m/eUJNNj4zI2N12i25v8fYpVf+zCakQeaTdBdhnZTFbVIAVZIVVOg==
  
  peek-readable@^4.1.0:
    version "4.1.0"
    resolved "https://registry.yarnpkg.com/peek-readable/-/peek-readable-4.1.0.tgz#4ece1111bf5c2ad8867c314c81356847e8a62e72"
    integrity sha512-ZI3LnwUv5nOGbQzD9c2iDG6toheuXSZP5esSHBjopsXH4dg19soufvpUGA3uohi5anFtGb2lhAVdHzH6R/Evvg==
  
  picomatch@2.3.1:
    version "2.3.1"
    resolved "https://registry.yarnpkg.com/picomatch/-/picomatch-2.3.1.tgz#3ba3833733646d9d3e4995946c1365a67fb07a42"
    integrity sha512-JU3teHTNjmE2VCGFzuY8EXzCDVwEqB2a8fsIvwaStHhAWJEeVd1o1QD80CU6+ZdEXXSLbSsuLwJjkCBWqRQUVA==
  
  readable-stream@^3.6.0:
    version "3.6.0"
    resolved "https://registry.yarnpkg.com/readable-stream/-/readable-stream-3.6.0.tgz#337bbda3adc0706bd3e024426a286d4b4b2c9198"
    integrity sha512-BViHy7LKeTz4oNnkcLJ+lVSL6vpiFeX6/d3oSH8zCW7UxP2onchk+vTGB143xuFjHS3deTgkKoXXymXqymiIdA==
    dependencies:
      inherits "^2.0.3"
      string_decoder "^1.1.1"
      util-deprecate "^1.0.1"
  
  readable-web-to-node-stream@^3.0.0:
    version "3.0.2"
    resolved "https://registry.yarnpkg.com/readable-web-to-node-stream/-/readable-web-to-node-stream-3.0.2.tgz#5d52bb5df7b54861fd48d015e93a2cb87b3ee0bb"
    integrity sha512-ePeK6cc1EcKLEhJFt/AebMCLL+GgSKhuygrZ/GLaKZYEecIgIECf4UaUuaByiGtzckwR4ain9VzUh95T1exYGw==
    dependencies:
      readable-stream "^3.6.0"
  
  safe-buffer@~5.2.0:
    version "5.2.1"
    resolved "https://registry.yarnpkg.com/safe-buffer/-/safe-buffer-5.2.1.tgz#1eaf9fa9bdb1fdd4ec75f58f9cdb4e6b7827eec6"
    integrity sha512-rp3So07KcdmmKbGvgaNxQSJr7bGVSVk5S9Eq1F+ppbRo70+YeaDxkw5Dd8NPN+GD6bjnYm2VuPuCXmpuYvmCXQ==
  
  string_decoder@^1.1.1:
    version "1.3.0"
    resolved "https://registry.yarnpkg.com/string_decoder/-/string_decoder-1.3.0.tgz#42f114594a46cf1a8e30b0a84f56c78c3edac21e"
    integrity sha512-hkRX8U1WjJFd8LsDJ2yQ/wWWxaopEsABU1XfkM8A+j0+85JAGppt16cr1Whg6KIbb4okU6Mql6BOj+uup/wKeA==
    dependencies:
      safe-buffer "~5.2.0"
  
  strtok3@^6.2.4:
    version "6.3.0"
    resolved "https://registry.yarnpkg.com/strtok3/-/strtok3-6.3.0.tgz#358b80ffe6d5d5620e19a073aa78ce947a90f9a0"
    integrity sha512-fZtbhtvI9I48xDSywd/somNqgUHl2L2cstmXCCif0itOf96jeW18MBSyrLuNicYQVkvpOxkZtkzujiTJ9LW5Jw==
    dependencies:
      "@tokenizer/token" "^0.3.0"
      peek-readable "^4.1.0"
  
  token-types@^4.1.1:
    version "4.2.0"
    resolved "https://registry.yarnpkg.com/token-types/-/token-types-4.2.0.tgz#b66bc3d67420c6873222a424eee64a744f4c2f13"
    integrity sha512-P0rrp4wUpefLncNamWIef62J0v0kQR/GfDVji9WKY7GDCWy5YbVSrKUTam07iWPZQGy0zWNOfstYTykMmPNR7w==
    dependencies:
      "@tokenizer/token" "^0.3.0"
      ieee754 "^1.2.1"
  
  undici-types@~5.26.4:
    version "5.26.5"
    resolved "https://registry.yarnpkg.com/undici-types/-/undici-types-5.26.5.tgz#bcd539893d00b56e964fd2657a4866b221a65617"
    integrity sha512-JlCMO+ehdEIKqlFxk6IfVoAUVmgz7cU7zD/h9XZ0qzeosSHmUJVOzSQvvYSYWXkFXC+IfLKSIffhv0sVZup6pA==
  
  util-deprecate@^1.0.1:
    version "1.0.2"
    resolved "https://registry.yarnpkg.com/util-deprecate/-/util-deprecate-1.0.2.tgz#450d4dc9fa70de732762fbd2d4a28981419a0ccf"
    integrity sha512-EPD5q1uXyFxJpCrLnCc1nHnq3gOa6DZBocAIiI2TaSCA7VCJ1UJDMagCzIkXNsUYfD1daK//LTEQ8xiIbrHtcw==
  
  vscode-uri@^2.0.0:
    version "2.0.0"
    resolved "https://registry.yarnpkg.com/vscode-uri/-/vscode-uri-2.0.0.tgz#2df704222f72b8a71ff266ba0830ed6c51ac1542"
    integrity sha512-lWXWofDSYD8r/TIyu64MdwB4FaSirQ608PP/TzUyslyOeHGwQ0eTHUZeJrK1ILOmwUHaJtV693m2JoUYroUDpw==
  
  which@4.0.0:
    version "4.0.0"
    resolved "https://registry.yarnpkg.com/which/-/which-4.0.0.tgz#cd60b5e74503a3fbcfbf6cd6b4138a8bae644c1a"
    integrity sha512-GlaYyEb07DPxYCKhKzplCWBJtvxZcZMrL+4UkrTSJHHPyZU4mYYTv3qaOe77H7EODLSSopAUFAc6W8U4yqvscg==
    dependencies:
      isexe "^3.1.1"
